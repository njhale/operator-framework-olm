// Automatically generated by MockGen. DO NOT EDIT!
// Source: install/resolver.go

package install

import (
	v1alpha1 "github.com/coreos-inc/alm/apis/clusterserviceversion/v1alpha1"
	client "github.com/coreos-inc/operator-client/pkg/client"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Mock of Resolver interface
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *_MockResolverRecorder
}

// Recorder for MockResolver (not exported)
type _MockResolverRecorder struct {
	mock *MockResolver
}

func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &_MockResolverRecorder{mock}
	return mock
}

func (_m *MockResolver) EXPECT() *_MockResolverRecorder {
	return _m.recorder
}

func (_m *MockResolver) CheckInstalled(s v1alpha1.NamedInstallStrategy, owner v1.ObjectMeta) (bool, error) {
	ret := _m.ctrl.Call(_m, "CheckInstalled", s, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResolverRecorder) CheckInstalled(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckInstalled", arg0, arg1)
}

func (_m *MockResolver) ApplyStrategy(s v1alpha1.NamedInstallStrategy, owner v1.ObjectMeta) error {
	ret := _m.ctrl.Call(_m, "ApplyStrategy", s, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockResolverRecorder) ApplyStrategy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ApplyStrategy", arg0, arg1)
}

func (_m *MockResolver) UnmarshalStrategy(s v1alpha1.NamedInstallStrategy) (Strategy, error) {
	ret := _m.ctrl.Call(_m, "UnmarshalStrategy", s)
	ret0, _ := ret[0].(Strategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockResolverRecorder) UnmarshalStrategy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmarshalStrategy", arg0)
}

// Mock of Strategy interface
type MockStrategy struct {
	ctrl     *gomock.Controller
	recorder *_MockStrategyRecorder
}

// Recorder for MockStrategy (not exported)
type _MockStrategyRecorder struct {
	mock *MockStrategy
}

func NewMockStrategy(ctrl *gomock.Controller) *MockStrategy {
	mock := &MockStrategy{ctrl: ctrl}
	mock.recorder = &_MockStrategyRecorder{mock}
	return mock
}

func (_m *MockStrategy) EXPECT() *_MockStrategyRecorder {
	return _m.recorder
}

func (_m *MockStrategy) Install(client client.Interface, owner v1.ObjectMeta) error {
	ret := _m.ctrl.Call(_m, "Install", client, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStrategyRecorder) Install(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Install", arg0, arg1)
}

func (_m *MockStrategy) CheckInstalled(client client.Interface, owner v1.ObjectMeta) (bool, error) {
	ret := _m.ctrl.Call(_m, "CheckInstalled", client, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStrategyRecorder) CheckInstalled(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckInstalled", arg0, arg1)
}
