// Code generated by MockGen. DO NOT EDIT.
// Source: operator-client/pkg/client/interface.go

// Package client is a generated GoMock package.
package client

import (
	types "github.com/coreos-inc/tectonic-operators/operator-client/pkg/types"
	gomock "github.com/golang/mock/gomock"
	v1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	v1beta10 "k8s.io/api/policy/v1beta1"
	v10 "k8s.io/api/rbac/v1"
	v1beta11 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	clientset "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	labels "k8s.io/apimachinery/pkg/labels"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// KubernetesInterface mocks base method
func (m *MockInterface) KubernetesInterface() kubernetes.Interface {
	ret := m.ctrl.Call(m, "KubernetesInterface")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// KubernetesInterface indicates an expected call of KubernetesInterface
func (mr *MockInterfaceMockRecorder) KubernetesInterface() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesInterface", reflect.TypeOf((*MockInterface)(nil).KubernetesInterface))
}

// ApiextensionsV1beta1Interface mocks base method
func (m *MockInterface) ApiextensionsV1beta1Interface() clientset.Interface {
	ret := m.ctrl.Call(m, "ApiextensionsV1beta1Interface")
	ret0, _ := ret[0].(clientset.Interface)
	return ret0
}

// ApiextensionsV1beta1Interface indicates an expected call of ApiextensionsV1beta1Interface
func (mr *MockInterfaceMockRecorder) ApiextensionsV1beta1Interface() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiextensionsV1beta1Interface", reflect.TypeOf((*MockInterface)(nil).ApiextensionsV1beta1Interface))
}

// RunLeaderElection mocks base method
func (m *MockInterface) RunLeaderElection(arg0 LeaderElectionConfig) {
	m.ctrl.Call(m, "RunLeaderElection", arg0)
}

// RunLeaderElection indicates an expected call of RunLeaderElection
func (mr *MockInterfaceMockRecorder) RunLeaderElection(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunLeaderElection", reflect.TypeOf((*MockInterface)(nil).RunLeaderElection), arg0)
}

// ImpersonatedClientForServiceAccount mocks base method
func (m *MockInterface) ImpersonatedClientForServiceAccount(serviceAccountName, namespace string) (Interface, error) {
	ret := m.ctrl.Call(m, "ImpersonatedClientForServiceAccount", serviceAccountName, namespace)
	ret0, _ := ret[0].(Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImpersonatedClientForServiceAccount indicates an expected call of ImpersonatedClientForServiceAccount
func (mr *MockInterfaceMockRecorder) ImpersonatedClientForServiceAccount(serviceAccountName, namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImpersonatedClientForServiceAccount", reflect.TypeOf((*MockInterface)(nil).ImpersonatedClientForServiceAccount), serviceAccountName, namespace)
}

// GetCustomResource mocks base method
func (m *MockInterface) GetCustomResource(apiGroup, version, namespace, resourceKind, resourceName string) (*unstructured.Unstructured, error) {
	ret := m.ctrl.Call(m, "GetCustomResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResource indicates an expected call of GetCustomResource
func (mr *MockInterfaceMockRecorder) GetCustomResource(apiGroup, version, namespace, resourceKind, resourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResource", reflect.TypeOf((*MockInterface)(nil).GetCustomResource), apiGroup, version, namespace, resourceKind, resourceName)
}

// GetCustomResourceRaw mocks base method
func (m *MockInterface) GetCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName string) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetCustomResourceRaw", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResourceRaw indicates an expected call of GetCustomResourceRaw
func (mr *MockInterfaceMockRecorder) GetCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResourceRaw", reflect.TypeOf((*MockInterface)(nil).GetCustomResourceRaw), apiGroup, version, namespace, resourceKind, resourceName)
}

// CreateCustomResource mocks base method
func (m *MockInterface) CreateCustomResource(item *unstructured.Unstructured) error {
	ret := m.ctrl.Call(m, "CreateCustomResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResource indicates an expected call of CreateCustomResource
func (mr *MockInterfaceMockRecorder) CreateCustomResource(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResource", reflect.TypeOf((*MockInterface)(nil).CreateCustomResource), item)
}

// CreateCustomResourceRaw mocks base method
func (m *MockInterface) CreateCustomResourceRaw(apiGroup, version, namespace, kind string, data []byte) error {
	ret := m.ctrl.Call(m, "CreateCustomResourceRaw", apiGroup, version, namespace, kind, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceRaw indicates an expected call of CreateCustomResourceRaw
func (mr *MockInterfaceMockRecorder) CreateCustomResourceRaw(apiGroup, version, namespace, kind, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceRaw", reflect.TypeOf((*MockInterface)(nil).CreateCustomResourceRaw), apiGroup, version, namespace, kind, data)
}

// CreateCustomResourceRawIfNotFound mocks base method
func (m *MockInterface) CreateCustomResourceRawIfNotFound(apiGroup, version, namespace, kind, name string, data []byte) (bool, error) {
	ret := m.ctrl.Call(m, "CreateCustomResourceRawIfNotFound", apiGroup, version, namespace, kind, name, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomResourceRawIfNotFound indicates an expected call of CreateCustomResourceRawIfNotFound
func (mr *MockInterfaceMockRecorder) CreateCustomResourceRawIfNotFound(apiGroup, version, namespace, kind, name, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceRawIfNotFound", reflect.TypeOf((*MockInterface)(nil).CreateCustomResourceRawIfNotFound), apiGroup, version, namespace, kind, name, data)
}

// UpdateCustomResource mocks base method
func (m *MockInterface) UpdateCustomResource(item *unstructured.Unstructured) error {
	ret := m.ctrl.Call(m, "UpdateCustomResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResource indicates an expected call of UpdateCustomResource
func (mr *MockInterfaceMockRecorder) UpdateCustomResource(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResource", reflect.TypeOf((*MockInterface)(nil).UpdateCustomResource), item)
}

// UpdateCustomResourceRaw mocks base method
func (m *MockInterface) UpdateCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName string, data []byte) error {
	ret := m.ctrl.Call(m, "UpdateCustomResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResourceRaw indicates an expected call of UpdateCustomResourceRaw
func (mr *MockInterfaceMockRecorder) UpdateCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResourceRaw", reflect.TypeOf((*MockInterface)(nil).UpdateCustomResourceRaw), apiGroup, version, namespace, resourceKind, resourceName, data)
}

// CreateOrUpdateCustomeResourceRaw mocks base method
func (m *MockInterface) CreateOrUpdateCustomeResourceRaw(apiGroup, version, namespace, resourceKind, resourceName string, data []byte) error {
	ret := m.ctrl.Call(m, "CreateOrUpdateCustomeResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateCustomeResourceRaw indicates an expected call of CreateOrUpdateCustomeResourceRaw
func (mr *MockInterfaceMockRecorder) CreateOrUpdateCustomeResourceRaw(apiGroup, version, namespace, resourceKind, resourceName, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCustomeResourceRaw", reflect.TypeOf((*MockInterface)(nil).CreateOrUpdateCustomeResourceRaw), apiGroup, version, namespace, resourceKind, resourceName, data)
}

// DeleteCustomResource mocks base method
func (m *MockInterface) DeleteCustomResource(apiGroup, version, namespace, resourceKind, resourceName string) error {
	ret := m.ctrl.Call(m, "DeleteCustomResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResource indicates an expected call of DeleteCustomResource
func (mr *MockInterfaceMockRecorder) DeleteCustomResource(apiGroup, version, namespace, resourceKind, resourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResource", reflect.TypeOf((*MockInterface)(nil).DeleteCustomResource), apiGroup, version, namespace, resourceKind, resourceName)
}

// AtomicModifyCustomResource mocks base method
func (m *MockInterface) AtomicModifyCustomResource(apiGroup, version, namespace, resourceKind, resourceName string, f CustomResourceModifier, data interface{}) error {
	ret := m.ctrl.Call(m, "AtomicModifyCustomResource", apiGroup, version, namespace, resourceKind, resourceName, f, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtomicModifyCustomResource indicates an expected call of AtomicModifyCustomResource
func (mr *MockInterfaceMockRecorder) AtomicModifyCustomResource(apiGroup, version, namespace, resourceKind, resourceName, f, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicModifyCustomResource", reflect.TypeOf((*MockInterface)(nil).AtomicModifyCustomResource), apiGroup, version, namespace, resourceKind, resourceName, f, data)
}

// ListCustomResource mocks base method
func (m *MockInterface) ListCustomResource(apiGroup, version, namespace, resourceKind string) (*CustomResourceList, error) {
	ret := m.ctrl.Call(m, "ListCustomResource", apiGroup, version, namespace, resourceKind)
	ret0, _ := ret[0].(*CustomResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomResource indicates an expected call of ListCustomResource
func (mr *MockInterfaceMockRecorder) ListCustomResource(apiGroup, version, namespace, resourceKind interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomResource", reflect.TypeOf((*MockInterface)(nil).ListCustomResource), apiGroup, version, namespace, resourceKind)
}

// GetCustomResourceDefinition mocks base method
func (m *MockInterface) GetCustomResourceDefinition(name string) (*v1beta11.CustomResourceDefinition, error) {
	ret := m.ctrl.Call(m, "GetCustomResourceDefinition", name)
	ret0, _ := ret[0].(*v1beta11.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResourceDefinition indicates an expected call of GetCustomResourceDefinition
func (mr *MockInterfaceMockRecorder) GetCustomResourceDefinition(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResourceDefinition", reflect.TypeOf((*MockInterface)(nil).GetCustomResourceDefinition), name)
}

// CreateCustomResourceDefinition mocks base method
func (m *MockInterface) CreateCustomResourceDefinition(crd *v1beta11.CustomResourceDefinition) error {
	ret := m.ctrl.Call(m, "CreateCustomResourceDefinition", crd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceDefinition indicates an expected call of CreateCustomResourceDefinition
func (mr *MockInterfaceMockRecorder) CreateCustomResourceDefinition(crd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceDefinition", reflect.TypeOf((*MockInterface)(nil).CreateCustomResourceDefinition), crd)
}

// UpdateCustomResourceDefinition mocks base method
func (m *MockInterface) UpdateCustomResourceDefinition(modified *v1beta11.CustomResourceDefinition) error {
	ret := m.ctrl.Call(m, "UpdateCustomResourceDefinition", modified)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResourceDefinition indicates an expected call of UpdateCustomResourceDefinition
func (mr *MockInterfaceMockRecorder) UpdateCustomResourceDefinition(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResourceDefinition", reflect.TypeOf((*MockInterface)(nil).UpdateCustomResourceDefinition), modified)
}

// DeleteCustomResourceDefinition mocks base method
func (m *MockInterface) DeleteCustomResourceDefinition(name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteCustomResourceDefinition", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResourceDefinition indicates an expected call of DeleteCustomResourceDefinition
func (mr *MockInterfaceMockRecorder) DeleteCustomResourceDefinition(name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResourceDefinition", reflect.TypeOf((*MockInterface)(nil).DeleteCustomResourceDefinition), name, options)
}

// EnsureCustomResourceDefinition mocks base method
func (m *MockInterface) EnsureCustomResourceDefinition(crd *v1beta11.CustomResourceDefinition) error {
	ret := m.ctrl.Call(m, "EnsureCustomResourceDefinition", crd)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureCustomResourceDefinition indicates an expected call of EnsureCustomResourceDefinition
func (mr *MockInterfaceMockRecorder) EnsureCustomResourceDefinition(crd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureCustomResourceDefinition", reflect.TypeOf((*MockInterface)(nil).EnsureCustomResourceDefinition), crd)
}

// GetMigrationStatus mocks base method
func (m *MockInterface) GetMigrationStatus(name string) (*types.MigrationStatus, error) {
	ret := m.ctrl.Call(m, "GetMigrationStatus", name)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationStatus indicates an expected call of GetMigrationStatus
func (mr *MockInterfaceMockRecorder) GetMigrationStatus(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationStatus", reflect.TypeOf((*MockInterface)(nil).GetMigrationStatus), name)
}

// CreateMigrationStatus mocks base method
func (m *MockInterface) CreateMigrationStatus(arg0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := m.ctrl.Call(m, "CreateMigrationStatus", arg0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMigrationStatus indicates an expected call of CreateMigrationStatus
func (mr *MockInterfaceMockRecorder) CreateMigrationStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationStatus", reflect.TypeOf((*MockInterface)(nil).CreateMigrationStatus), arg0)
}

// UpdateMigrationStatus mocks base method
func (m *MockInterface) UpdateMigrationStatus(arg0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := m.ctrl.Call(m, "UpdateMigrationStatus", arg0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigrationStatus indicates an expected call of UpdateMigrationStatus
func (mr *MockInterfaceMockRecorder) UpdateMigrationStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationStatus", reflect.TypeOf((*MockInterface)(nil).UpdateMigrationStatus), arg0)
}

// CreateAppVersion mocks base method
func (m *MockInterface) CreateAppVersion(arg0 *types.AppVersion) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "CreateAppVersion", arg0)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppVersion indicates an expected call of CreateAppVersion
func (mr *MockInterfaceMockRecorder) CreateAppVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppVersion", reflect.TypeOf((*MockInterface)(nil).CreateAppVersion), arg0)
}

// AtomicUpdateAppVersion mocks base method
func (m *MockInterface) AtomicUpdateAppVersion(name string, fn types.AppVersionModifier) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "AtomicUpdateAppVersion", name, fn)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicUpdateAppVersion indicates an expected call of AtomicUpdateAppVersion
func (mr *MockInterfaceMockRecorder) AtomicUpdateAppVersion(name, fn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicUpdateAppVersion", reflect.TypeOf((*MockInterface)(nil).AtomicUpdateAppVersion), name, fn)
}

// UpdateAppVersion mocks base method
func (m *MockInterface) UpdateAppVersion(arg0 *types.AppVersion) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "UpdateAppVersion", arg0)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppVersion indicates an expected call of UpdateAppVersion
func (mr *MockInterfaceMockRecorder) UpdateAppVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppVersion", reflect.TypeOf((*MockInterface)(nil).UpdateAppVersion), arg0)
}

// GetAppVersion mocks base method
func (m *MockInterface) GetAppVersion(name string) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "GetAppVersion", name)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppVersion indicates an expected call of GetAppVersion
func (mr *MockInterfaceMockRecorder) GetAppVersion(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersion", reflect.TypeOf((*MockInterface)(nil).GetAppVersion), name)
}

// ListAppVersionsWithLabels mocks base method
func (m *MockInterface) ListAppVersionsWithLabels(labels string) (*types.AppVersionList, error) {
	ret := m.ctrl.Call(m, "ListAppVersionsWithLabels", labels)
	ret0, _ := ret[0].(*types.AppVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionsWithLabels indicates an expected call of ListAppVersionsWithLabels
func (mr *MockInterfaceMockRecorder) ListAppVersionsWithLabels(labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionsWithLabels", reflect.TypeOf((*MockInterface)(nil).ListAppVersionsWithLabels), labels)
}

// DeleteAppVersion mocks base method
func (m *MockInterface) DeleteAppVersion(name string) error {
	ret := m.ctrl.Call(m, "DeleteAppVersion", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppVersion indicates an expected call of DeleteAppVersion
func (mr *MockInterfaceMockRecorder) DeleteAppVersion(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppVersion", reflect.TypeOf((*MockInterface)(nil).DeleteAppVersion), name)
}

// SetFailureStatus mocks base method
func (m *MockInterface) SetFailureStatus(name string, failureStatus *types.FailureStatus) error {
	ret := m.ctrl.Call(m, "SetFailureStatus", name, failureStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFailureStatus indicates an expected call of SetFailureStatus
func (mr *MockInterfaceMockRecorder) SetFailureStatus(name, failureStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFailureStatus", reflect.TypeOf((*MockInterface)(nil).SetFailureStatus), name, failureStatus)
}

// SetTaskStatuses mocks base method
func (m *MockInterface) SetTaskStatuses(name string, ts []types.TaskStatus) error {
	ret := m.ctrl.Call(m, "SetTaskStatuses", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskStatuses indicates an expected call of SetTaskStatuses
func (mr *MockInterfaceMockRecorder) SetTaskStatuses(name, ts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatuses", reflect.TypeOf((*MockInterface)(nil).SetTaskStatuses), name, ts)
}

// UpdateTaskStatus mocks base method
func (m *MockInterface) UpdateTaskStatus(name string, ts types.TaskStatus) error {
	ret := m.ctrl.Call(m, "UpdateTaskStatus", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus
func (mr *MockInterfaceMockRecorder) UpdateTaskStatus(name, ts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockInterface)(nil).UpdateTaskStatus), name, ts)
}

// CreateClusterRole mocks base method
func (m *MockInterface) CreateClusterRole(arg0 *v10.ClusterRole) (*v10.ClusterRole, error) {
	ret := m.ctrl.Call(m, "CreateClusterRole", arg0)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterRole indicates an expected call of CreateClusterRole
func (mr *MockInterfaceMockRecorder) CreateClusterRole(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRole", reflect.TypeOf((*MockInterface)(nil).CreateClusterRole), arg0)
}

// GetClusterRole mocks base method
func (m *MockInterface) GetClusterRole(name string) (*v10.ClusterRole, error) {
	ret := m.ctrl.Call(m, "GetClusterRole", name)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRole indicates an expected call of GetClusterRole
func (mr *MockInterfaceMockRecorder) GetClusterRole(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRole", reflect.TypeOf((*MockInterface)(nil).GetClusterRole), name)
}

// UpdateClusterRole mocks base method
func (m *MockInterface) UpdateClusterRole(modified *v10.ClusterRole) (*v10.ClusterRole, error) {
	ret := m.ctrl.Call(m, "UpdateClusterRole", modified)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterRole indicates an expected call of UpdateClusterRole
func (mr *MockInterfaceMockRecorder) UpdateClusterRole(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRole", reflect.TypeOf((*MockInterface)(nil).UpdateClusterRole), modified)
}

// DeleteClusterRole mocks base method
func (m *MockInterface) DeleteClusterRole(name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteClusterRole", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole
func (mr *MockInterfaceMockRecorder) DeleteClusterRole(name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockInterface)(nil).DeleteClusterRole), name, options)
}

// CreateClusterRoleBinding mocks base method
func (m *MockInterface) CreateClusterRoleBinding(arg0 *v10.ClusterRoleBinding) (*v10.ClusterRoleBinding, error) {
	ret := m.ctrl.Call(m, "CreateClusterRoleBinding", arg0)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterRoleBinding indicates an expected call of CreateClusterRoleBinding
func (mr *MockInterfaceMockRecorder) CreateClusterRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRoleBinding", reflect.TypeOf((*MockInterface)(nil).CreateClusterRoleBinding), arg0)
}

// GetClusterRoleBinding mocks base method
func (m *MockInterface) GetClusterRoleBinding(name string) (*v10.ClusterRoleBinding, error) {
	ret := m.ctrl.Call(m, "GetClusterRoleBinding", name)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBinding indicates an expected call of GetClusterRoleBinding
func (mr *MockInterfaceMockRecorder) GetClusterRoleBinding(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBinding", reflect.TypeOf((*MockInterface)(nil).GetClusterRoleBinding), name)
}

// UpdateClusterRoleBinding mocks base method
func (m *MockInterface) UpdateClusterRoleBinding(modified *v10.ClusterRoleBinding) (*v10.ClusterRoleBinding, error) {
	ret := m.ctrl.Call(m, "UpdateClusterRoleBinding", modified)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterRoleBinding indicates an expected call of UpdateClusterRoleBinding
func (mr *MockInterfaceMockRecorder) UpdateClusterRoleBinding(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBinding", reflect.TypeOf((*MockInterface)(nil).UpdateClusterRoleBinding), modified)
}

// DeleteClusterRoleBinding mocks base method
func (m *MockInterface) DeleteClusterRoleBinding(name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding
func (mr *MockInterfaceMockRecorder) DeleteClusterRoleBinding(name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockInterface)(nil).DeleteClusterRoleBinding), name, options)
}

// CreateConfigMap mocks base method
func (m *MockInterface) CreateConfigMap(namespace string, cm *v1.ConfigMap) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "CreateConfigMap", namespace, cm)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigMap indicates an expected call of CreateConfigMap
func (mr *MockInterfaceMockRecorder) CreateConfigMap(namespace, cm interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMap", reflect.TypeOf((*MockInterface)(nil).CreateConfigMap), namespace, cm)
}

// AtomicUpdateConfigMap mocks base method
func (m *MockInterface) AtomicUpdateConfigMap(namespace, name string, fn types.ConfigMapModifier) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "AtomicUpdateConfigMap", namespace, name, fn)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicUpdateConfigMap indicates an expected call of AtomicUpdateConfigMap
func (mr *MockInterfaceMockRecorder) AtomicUpdateConfigMap(namespace, name, fn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicUpdateConfigMap", reflect.TypeOf((*MockInterface)(nil).AtomicUpdateConfigMap), namespace, name, fn)
}

// UpdateConfigMap mocks base method
func (m *MockInterface) UpdateConfigMap(arg0 *v1.ConfigMap) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "UpdateConfigMap", arg0)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigMap indicates an expected call of UpdateConfigMap
func (mr *MockInterfaceMockRecorder) UpdateConfigMap(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigMap", reflect.TypeOf((*MockInterface)(nil).UpdateConfigMap), arg0)
}

// GetConfigMap mocks base method
func (m *MockInterface) GetConfigMap(namespace, name string) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "GetConfigMap", namespace, name)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap
func (mr *MockInterfaceMockRecorder) GetConfigMap(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockInterface)(nil).GetConfigMap), namespace, name)
}

// ListConfigMapsWithLabels mocks base method
func (m *MockInterface) ListConfigMapsWithLabels(namespace string, labels labels.Set) (*v1.ConfigMapList, error) {
	ret := m.ctrl.Call(m, "ListConfigMapsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1.ConfigMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigMapsWithLabels indicates an expected call of ListConfigMapsWithLabels
func (mr *MockInterfaceMockRecorder) ListConfigMapsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigMapsWithLabels", reflect.TypeOf((*MockInterface)(nil).ListConfigMapsWithLabels), namespace, labels)
}

// DeleteConfigMap mocks base method
func (m *MockInterface) DeleteConfigMap(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteConfigMap", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigMap indicates an expected call of DeleteConfigMap
func (mr *MockInterfaceMockRecorder) DeleteConfigMap(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigMap", reflect.TypeOf((*MockInterface)(nil).DeleteConfigMap), namespace, name, options)
}

// CreateDaemonSet mocks base method
func (m *MockInterface) CreateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error) {
	ret := m.ctrl.Call(m, "CreateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDaemonSet indicates an expected call of CreateDaemonSet
func (mr *MockInterfaceMockRecorder) CreateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDaemonSet", reflect.TypeOf((*MockInterface)(nil).CreateDaemonSet), arg0)
}

// GetDaemonSet mocks base method
func (m *MockInterface) GetDaemonSet(namespace, name string) (*v1beta2.DaemonSet, error) {
	ret := m.ctrl.Call(m, "GetDaemonSet", namespace, name)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSet indicates an expected call of GetDaemonSet
func (mr *MockInterfaceMockRecorder) GetDaemonSet(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSet", reflect.TypeOf((*MockInterface)(nil).GetDaemonSet), namespace, name)
}

// DeleteDaemonSet mocks base method
func (m *MockInterface) DeleteDaemonSet(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteDaemonSet", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet
func (mr *MockInterfaceMockRecorder) DeleteDaemonSet(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockInterface)(nil).DeleteDaemonSet), namespace, name, options)
}

// UpdateDaemonSet mocks base method
func (m *MockInterface) UpdateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "UpdateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDaemonSet indicates an expected call of UpdateDaemonSet
func (mr *MockInterfaceMockRecorder) UpdateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDaemonSet", reflect.TypeOf((*MockInterface)(nil).UpdateDaemonSet), arg0)
}

// PatchDaemonSet mocks base method
func (m *MockInterface) PatchDaemonSet(arg0, arg1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "PatchDaemonSet", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchDaemonSet indicates an expected call of PatchDaemonSet
func (mr *MockInterfaceMockRecorder) PatchDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSet", reflect.TypeOf((*MockInterface)(nil).PatchDaemonSet), arg0, arg1)
}

// RollingUpdateDaemonSet mocks base method
func (m *MockInterface) RollingUpdateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDaemonSet indicates an expected call of RollingUpdateDaemonSet
func (mr *MockInterfaceMockRecorder) RollingUpdateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDaemonSet", reflect.TypeOf((*MockInterface)(nil).RollingUpdateDaemonSet), arg0)
}

// RollingPatchDaemonSet mocks base method
func (m *MockInterface) RollingPatchDaemonSet(arg0, arg1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDaemonSet", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDaemonSet indicates an expected call of RollingPatchDaemonSet
func (mr *MockInterfaceMockRecorder) RollingPatchDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDaemonSet", reflect.TypeOf((*MockInterface)(nil).RollingPatchDaemonSet), arg0, arg1)
}

// RollingUpdateDaemonSetMigrations mocks base method
func (m *MockInterface) RollingUpdateDaemonSetMigrations(namespace, name string, f UpdateFunction, opts UpdateOpts) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDaemonSetMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDaemonSetMigrations indicates an expected call of RollingUpdateDaemonSetMigrations
func (mr *MockInterfaceMockRecorder) RollingUpdateDaemonSetMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDaemonSetMigrations", reflect.TypeOf((*MockInterface)(nil).RollingUpdateDaemonSetMigrations), namespace, name, f, opts)
}

// RollingPatchDaemonSetMigrations mocks base method
func (m *MockInterface) RollingPatchDaemonSetMigrations(namespace, name string, f PatchFunction, opts UpdateOpts) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDaemonSetMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDaemonSetMigrations indicates an expected call of RollingPatchDaemonSetMigrations
func (mr *MockInterfaceMockRecorder) RollingPatchDaemonSetMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDaemonSetMigrations", reflect.TypeOf((*MockInterface)(nil).RollingPatchDaemonSetMigrations), namespace, name, f, opts)
}

// CreateOrRollingUpdateDaemonSet mocks base method
func (m *MockInterface) CreateOrRollingUpdateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "CreateOrRollingUpdateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrRollingUpdateDaemonSet indicates an expected call of CreateOrRollingUpdateDaemonSet
func (mr *MockInterfaceMockRecorder) CreateOrRollingUpdateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrRollingUpdateDaemonSet", reflect.TypeOf((*MockInterface)(nil).CreateOrRollingUpdateDaemonSet), arg0)
}

// NumberOfDesiredPodsForDaemonSet mocks base method
func (m *MockInterface) NumberOfDesiredPodsForDaemonSet(arg0 *v1beta2.DaemonSet) (int, error) {
	ret := m.ctrl.Call(m, "NumberOfDesiredPodsForDaemonSet", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfDesiredPodsForDaemonSet indicates an expected call of NumberOfDesiredPodsForDaemonSet
func (mr *MockInterfaceMockRecorder) NumberOfDesiredPodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfDesiredPodsForDaemonSet", reflect.TypeOf((*MockInterface)(nil).NumberOfDesiredPodsForDaemonSet), arg0)
}

// ListDaemonSetsWithLabels mocks base method
func (m *MockInterface) ListDaemonSetsWithLabels(namespace string, labels labels.Set) (*v1beta2.DaemonSetList, error) {
	ret := m.ctrl.Call(m, "ListDaemonSetsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1beta2.DaemonSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDaemonSetsWithLabels indicates an expected call of ListDaemonSetsWithLabels
func (mr *MockInterfaceMockRecorder) ListDaemonSetsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDaemonSetsWithLabels", reflect.TypeOf((*MockInterface)(nil).ListDaemonSetsWithLabels), namespace, labels)
}

// GetDeployment mocks base method
func (m *MockInterface) GetDeployment(namespace, name string) (*v1beta2.Deployment, error) {
	ret := m.ctrl.Call(m, "GetDeployment", namespace, name)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockInterfaceMockRecorder) GetDeployment(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockInterface)(nil).GetDeployment), namespace, name)
}

// CreateDeployment mocks base method
func (m *MockInterface) CreateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, error) {
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockInterfaceMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockInterface)(nil).CreateDeployment), arg0)
}

// DeleteDeployment mocks base method
func (m *MockInterface) DeleteDeployment(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteDeployment", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockInterfaceMockRecorder) DeleteDeployment(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockInterface)(nil).DeleteDeployment), namespace, name, options)
}

// UpdateDeployment mocks base method
func (m *MockInterface) UpdateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockInterfaceMockRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockInterface)(nil).UpdateDeployment), arg0)
}

// PatchDeployment mocks base method
func (m *MockInterface) PatchDeployment(arg0, arg1 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "PatchDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchDeployment indicates an expected call of PatchDeployment
func (mr *MockInterfaceMockRecorder) PatchDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeployment", reflect.TypeOf((*MockInterface)(nil).PatchDeployment), arg0, arg1)
}

// RollingUpdateDeployment mocks base method
func (m *MockInterface) RollingUpdateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDeployment indicates an expected call of RollingUpdateDeployment
func (mr *MockInterfaceMockRecorder) RollingUpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDeployment", reflect.TypeOf((*MockInterface)(nil).RollingUpdateDeployment), arg0)
}

// RollingPatchDeployment mocks base method
func (m *MockInterface) RollingPatchDeployment(arg0, arg1 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDeployment indicates an expected call of RollingPatchDeployment
func (mr *MockInterfaceMockRecorder) RollingPatchDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDeployment", reflect.TypeOf((*MockInterface)(nil).RollingPatchDeployment), arg0, arg1)
}

// RollingUpdateDeploymentMigrations mocks base method
func (m *MockInterface) RollingUpdateDeploymentMigrations(namespace, name string, f UpdateFunction, opts UpdateOpts) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDeploymentMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDeploymentMigrations indicates an expected call of RollingUpdateDeploymentMigrations
func (mr *MockInterfaceMockRecorder) RollingUpdateDeploymentMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDeploymentMigrations", reflect.TypeOf((*MockInterface)(nil).RollingUpdateDeploymentMigrations), namespace, name, f, opts)
}

// RollingPatchDeploymentMigrations mocks base method
func (m *MockInterface) RollingPatchDeploymentMigrations(namespace, name string, f PatchFunction, opts UpdateOpts) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDeploymentMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDeploymentMigrations indicates an expected call of RollingPatchDeploymentMigrations
func (mr *MockInterfaceMockRecorder) RollingPatchDeploymentMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDeploymentMigrations", reflect.TypeOf((*MockInterface)(nil).RollingPatchDeploymentMigrations), namespace, name, f, opts)
}

// CreateOrRollingUpdateDeployment mocks base method
func (m *MockInterface) CreateOrRollingUpdateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "CreateOrRollingUpdateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrRollingUpdateDeployment indicates an expected call of CreateOrRollingUpdateDeployment
func (mr *MockInterfaceMockRecorder) CreateOrRollingUpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrRollingUpdateDeployment", reflect.TypeOf((*MockInterface)(nil).CreateOrRollingUpdateDeployment), arg0)
}

// ListDeploymentsWithLabels mocks base method
func (m *MockInterface) ListDeploymentsWithLabels(namespace string, labels labels.Set) (*v1beta2.DeploymentList, error) {
	ret := m.ctrl.Call(m, "ListDeploymentsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1beta2.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsWithLabels indicates an expected call of ListDeploymentsWithLabels
func (mr *MockInterfaceMockRecorder) ListDeploymentsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsWithLabels", reflect.TypeOf((*MockInterface)(nil).ListDeploymentsWithLabels), namespace, labels)
}

// CreateIngress mocks base method
func (m *MockInterface) CreateIngress(arg0 *v1beta1.Ingress) (*v1beta1.Ingress, error) {
	ret := m.ctrl.Call(m, "CreateIngress", arg0)
	ret0, _ := ret[0].(*v1beta1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngress indicates an expected call of CreateIngress
func (mr *MockInterfaceMockRecorder) CreateIngress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngress", reflect.TypeOf((*MockInterface)(nil).CreateIngress), arg0)
}

// GetIngress mocks base method
func (m *MockInterface) GetIngress(namespace, name string) (*v1beta1.Ingress, error) {
	ret := m.ctrl.Call(m, "GetIngress", namespace, name)
	ret0, _ := ret[0].(*v1beta1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngress indicates an expected call of GetIngress
func (mr *MockInterfaceMockRecorder) GetIngress(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngress", reflect.TypeOf((*MockInterface)(nil).GetIngress), namespace, name)
}

// UpdateIngress mocks base method
func (m *MockInterface) UpdateIngress(original, modified *v1beta1.Ingress) (*v1beta1.Ingress, bool, error) {
	ret := m.ctrl.Call(m, "UpdateIngress", original, modified)
	ret0, _ := ret[0].(*v1beta1.Ingress)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIngress indicates an expected call of UpdateIngress
func (mr *MockInterfaceMockRecorder) UpdateIngress(original, modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngress", reflect.TypeOf((*MockInterface)(nil).UpdateIngress), original, modified)
}

// DeleteIngress mocks base method
func (m *MockInterface) DeleteIngress(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteIngress", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngress indicates an expected call of DeleteIngress
func (mr *MockInterfaceMockRecorder) DeleteIngress(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngress", reflect.TypeOf((*MockInterface)(nil).DeleteIngress), namespace, name, options)
}

// ListNodes mocks base method
func (m *MockInterface) ListNodes(arg0 v11.ListOptions) (*v1.NodeList, error) {
	ret := m.ctrl.Call(m, "ListNodes", arg0)
	ret0, _ := ret[0].(*v1.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes
func (mr *MockInterfaceMockRecorder) ListNodes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockInterface)(nil).ListNodes), arg0)
}

// GetNode mocks base method
func (m *MockInterface) GetNode(name string) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "GetNode", name)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockInterfaceMockRecorder) GetNode(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockInterface)(nil).GetNode), name)
}

// UpdateNode mocks base method
func (m *MockInterface) UpdateNode(arg0 *v1.Node) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "UpdateNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode
func (mr *MockInterfaceMockRecorder) UpdateNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockInterface)(nil).UpdateNode), arg0)
}

// AtomicUpdateNode mocks base method
func (m *MockInterface) AtomicUpdateNode(name string, f types.NodeModifier) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "AtomicUpdateNode", name, f)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicUpdateNode indicates an expected call of AtomicUpdateNode
func (mr *MockInterfaceMockRecorder) AtomicUpdateNode(name, f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicUpdateNode", reflect.TypeOf((*MockInterface)(nil).AtomicUpdateNode), name, f)
}

// DrainNode mocks base method
func (m *MockInterface) DrainNode(arg0 *v1.Node) error {
	ret := m.ctrl.Call(m, "DrainNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DrainNode indicates an expected call of DrainNode
func (mr *MockInterfaceMockRecorder) DrainNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainNode", reflect.TypeOf((*MockInterface)(nil).DrainNode), arg0)
}

// OptimisticDrainNode mocks base method
func (m *MockInterface) OptimisticDrainNode(arg0 *v1.Node) error {
	ret := m.ctrl.Call(m, "OptimisticDrainNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OptimisticDrainNode indicates an expected call of OptimisticDrainNode
func (mr *MockInterfaceMockRecorder) OptimisticDrainNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimisticDrainNode", reflect.TypeOf((*MockInterface)(nil).OptimisticDrainNode), arg0)
}

// UnCordonNode mocks base method
func (m *MockInterface) UnCordonNode(arg0 *v1.Node) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "UnCordonNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnCordonNode indicates an expected call of UnCordonNode
func (mr *MockInterfaceMockRecorder) UnCordonNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnCordonNode", reflect.TypeOf((*MockInterface)(nil).UnCordonNode), arg0)
}

// CordonNode mocks base method
func (m *MockInterface) CordonNode(arg0 *v1.Node) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "CordonNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CordonNode indicates an expected call of CordonNode
func (mr *MockInterfaceMockRecorder) CordonNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CordonNode", reflect.TypeOf((*MockInterface)(nil).CordonNode), arg0)
}

// DeletePod mocks base method
func (m *MockInterface) DeletePod(namespace, name string) error {
	ret := m.ctrl.Call(m, "DeletePod", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod
func (mr *MockInterfaceMockRecorder) DeletePod(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockInterface)(nil).DeletePod), namespace, name)
}

// ListPodsWithLabels mocks base method
func (m *MockInterface) ListPodsWithLabels(namespace string, labels labels.Set) (*v1.PodList, error) {
	ret := m.ctrl.Call(m, "ListPodsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodsWithLabels indicates an expected call of ListPodsWithLabels
func (mr *MockInterfaceMockRecorder) ListPodsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodsWithLabels", reflect.TypeOf((*MockInterface)(nil).ListPodsWithLabels), namespace, labels)
}

// CreatePodDisruptionBudget mocks base method
func (m *MockInterface) CreatePodDisruptionBudget(arg0 *v1beta10.PodDisruptionBudget) (*v1beta10.PodDisruptionBudget, error) {
	ret := m.ctrl.Call(m, "CreatePodDisruptionBudget", arg0)
	ret0, _ := ret[0].(*v1beta10.PodDisruptionBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePodDisruptionBudget indicates an expected call of CreatePodDisruptionBudget
func (mr *MockInterfaceMockRecorder) CreatePodDisruptionBudget(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodDisruptionBudget", reflect.TypeOf((*MockInterface)(nil).CreatePodDisruptionBudget), arg0)
}

// GetPodDisruptionBudget mocks base method
func (m *MockInterface) GetPodDisruptionBudget(namespace, name string) (*v1beta10.PodDisruptionBudget, error) {
	ret := m.ctrl.Call(m, "GetPodDisruptionBudget", namespace, name)
	ret0, _ := ret[0].(*v1beta10.PodDisruptionBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodDisruptionBudget indicates an expected call of GetPodDisruptionBudget
func (mr *MockInterfaceMockRecorder) GetPodDisruptionBudget(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodDisruptionBudget", reflect.TypeOf((*MockInterface)(nil).GetPodDisruptionBudget), namespace, name)
}

// UpdatePodDisruptionBudget mocks base method
func (m *MockInterface) UpdatePodDisruptionBudget(arg0 *v1beta10.PodDisruptionBudget) (*v1beta10.PodDisruptionBudget, error) {
	ret := m.ctrl.Call(m, "UpdatePodDisruptionBudget", arg0)
	ret0, _ := ret[0].(*v1beta10.PodDisruptionBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePodDisruptionBudget indicates an expected call of UpdatePodDisruptionBudget
func (mr *MockInterfaceMockRecorder) UpdatePodDisruptionBudget(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodDisruptionBudget", reflect.TypeOf((*MockInterface)(nil).UpdatePodDisruptionBudget), arg0)
}

// DeletePodDisruptionBudget mocks base method
func (m *MockInterface) DeletePodDisruptionBudget(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeletePodDisruptionBudget", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodDisruptionBudget indicates an expected call of DeletePodDisruptionBudget
func (mr *MockInterfaceMockRecorder) DeletePodDisruptionBudget(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodDisruptionBudget", reflect.TypeOf((*MockInterface)(nil).DeletePodDisruptionBudget), namespace, name, options)
}

// GetService mocks base method
func (m *MockInterface) GetService(namespace, name string) (*v1.Service, error) {
	ret := m.ctrl.Call(m, "GetService", namespace, name)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockInterfaceMockRecorder) GetService(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockInterface)(nil).GetService), namespace, name)
}

// CreateService mocks base method
func (m *MockInterface) CreateService(arg0 *v1.Service) (*v1.Service, error) {
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockInterfaceMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockInterface)(nil).CreateService), arg0)
}

// DeleteService mocks base method
func (m *MockInterface) DeleteService(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteService", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockInterfaceMockRecorder) DeleteService(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockInterface)(nil).DeleteService), namespace, name, options)
}

// UpdateService mocks base method
func (m *MockInterface) UpdateService(arg0 *v1.Service) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockInterfaceMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockInterface)(nil).UpdateService), arg0)
}

// PatchService mocks base method
func (m *MockInterface) PatchService(arg0, arg1 *v1.Service) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "PatchService", arg0, arg1)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchService indicates an expected call of PatchService
func (mr *MockInterfaceMockRecorder) PatchService(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchService", reflect.TypeOf((*MockInterface)(nil).PatchService), arg0, arg1)
}

// UpdateServiceMigrations mocks base method
func (m *MockInterface) UpdateServiceMigrations(namespace, name string, f UpdateFunction, opts UpdateOpts) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "UpdateServiceMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateServiceMigrations indicates an expected call of UpdateServiceMigrations
func (mr *MockInterfaceMockRecorder) UpdateServiceMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceMigrations", reflect.TypeOf((*MockInterface)(nil).UpdateServiceMigrations), namespace, name, f, opts)
}

// PatchServiceMigrations mocks base method
func (m *MockInterface) PatchServiceMigrations(namespace, name string, f PatchFunction, opts UpdateOpts) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "PatchServiceMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchServiceMigrations indicates an expected call of PatchServiceMigrations
func (mr *MockInterfaceMockRecorder) PatchServiceMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceMigrations", reflect.TypeOf((*MockInterface)(nil).PatchServiceMigrations), namespace, name, f, opts)
}

// CreateServiceAccount mocks base method
func (m *MockInterface) CreateServiceAccount(arg0 *v1.ServiceAccount) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "CreateServiceAccount", arg0)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount
func (mr *MockInterfaceMockRecorder) CreateServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockInterface)(nil).CreateServiceAccount), arg0)
}

// GetServiceAccount mocks base method
func (m *MockInterface) GetServiceAccount(namespace, name string) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "GetServiceAccount", namespace, name)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount
func (mr *MockInterfaceMockRecorder) GetServiceAccount(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockInterface)(nil).GetServiceAccount), namespace, name)
}

// UpdateServiceAccount mocks base method
func (m *MockInterface) UpdateServiceAccount(modified *v1.ServiceAccount) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "UpdateServiceAccount", modified)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount
func (mr *MockInterfaceMockRecorder) UpdateServiceAccount(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockInterface)(nil).UpdateServiceAccount), modified)
}

// DeleteServiceAccount mocks base method
func (m *MockInterface) DeleteServiceAccount(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteServiceAccount", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount
func (mr *MockInterfaceMockRecorder) DeleteServiceAccount(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockInterface)(nil).DeleteServiceAccount), namespace, name, options)
}

// MockAppVersionClient is a mock of AppVersionClient interface
type MockAppVersionClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppVersionClientMockRecorder
}

// MockAppVersionClientMockRecorder is the mock recorder for MockAppVersionClient
type MockAppVersionClientMockRecorder struct {
	mock *MockAppVersionClient
}

// NewMockAppVersionClient creates a new mock instance
func NewMockAppVersionClient(ctrl *gomock.Controller) *MockAppVersionClient {
	mock := &MockAppVersionClient{ctrl: ctrl}
	mock.recorder = &MockAppVersionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppVersionClient) EXPECT() *MockAppVersionClientMockRecorder {
	return m.recorder
}

// CreateAppVersion mocks base method
func (m *MockAppVersionClient) CreateAppVersion(arg0 *types.AppVersion) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "CreateAppVersion", arg0)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppVersion indicates an expected call of CreateAppVersion
func (mr *MockAppVersionClientMockRecorder) CreateAppVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppVersion", reflect.TypeOf((*MockAppVersionClient)(nil).CreateAppVersion), arg0)
}

// AtomicUpdateAppVersion mocks base method
func (m *MockAppVersionClient) AtomicUpdateAppVersion(name string, fn types.AppVersionModifier) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "AtomicUpdateAppVersion", name, fn)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicUpdateAppVersion indicates an expected call of AtomicUpdateAppVersion
func (mr *MockAppVersionClientMockRecorder) AtomicUpdateAppVersion(name, fn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicUpdateAppVersion", reflect.TypeOf((*MockAppVersionClient)(nil).AtomicUpdateAppVersion), name, fn)
}

// UpdateAppVersion mocks base method
func (m *MockAppVersionClient) UpdateAppVersion(arg0 *types.AppVersion) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "UpdateAppVersion", arg0)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppVersion indicates an expected call of UpdateAppVersion
func (mr *MockAppVersionClientMockRecorder) UpdateAppVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppVersion", reflect.TypeOf((*MockAppVersionClient)(nil).UpdateAppVersion), arg0)
}

// GetAppVersion mocks base method
func (m *MockAppVersionClient) GetAppVersion(name string) (*types.AppVersion, error) {
	ret := m.ctrl.Call(m, "GetAppVersion", name)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppVersion indicates an expected call of GetAppVersion
func (mr *MockAppVersionClientMockRecorder) GetAppVersion(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppVersion", reflect.TypeOf((*MockAppVersionClient)(nil).GetAppVersion), name)
}

// ListAppVersionsWithLabels mocks base method
func (m *MockAppVersionClient) ListAppVersionsWithLabels(labels string) (*types.AppVersionList, error) {
	ret := m.ctrl.Call(m, "ListAppVersionsWithLabels", labels)
	ret0, _ := ret[0].(*types.AppVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppVersionsWithLabels indicates an expected call of ListAppVersionsWithLabels
func (mr *MockAppVersionClientMockRecorder) ListAppVersionsWithLabels(labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppVersionsWithLabels", reflect.TypeOf((*MockAppVersionClient)(nil).ListAppVersionsWithLabels), labels)
}

// DeleteAppVersion mocks base method
func (m *MockAppVersionClient) DeleteAppVersion(name string) error {
	ret := m.ctrl.Call(m, "DeleteAppVersion", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppVersion indicates an expected call of DeleteAppVersion
func (mr *MockAppVersionClientMockRecorder) DeleteAppVersion(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppVersion", reflect.TypeOf((*MockAppVersionClient)(nil).DeleteAppVersion), name)
}

// SetFailureStatus mocks base method
func (m *MockAppVersionClient) SetFailureStatus(name string, failureStatus *types.FailureStatus) error {
	ret := m.ctrl.Call(m, "SetFailureStatus", name, failureStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFailureStatus indicates an expected call of SetFailureStatus
func (mr *MockAppVersionClientMockRecorder) SetFailureStatus(name, failureStatus interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFailureStatus", reflect.TypeOf((*MockAppVersionClient)(nil).SetFailureStatus), name, failureStatus)
}

// SetTaskStatuses mocks base method
func (m *MockAppVersionClient) SetTaskStatuses(name string, ts []types.TaskStatus) error {
	ret := m.ctrl.Call(m, "SetTaskStatuses", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTaskStatuses indicates an expected call of SetTaskStatuses
func (mr *MockAppVersionClientMockRecorder) SetTaskStatuses(name, ts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatuses", reflect.TypeOf((*MockAppVersionClient)(nil).SetTaskStatuses), name, ts)
}

// UpdateTaskStatus mocks base method
func (m *MockAppVersionClient) UpdateTaskStatus(name string, ts types.TaskStatus) error {
	ret := m.ctrl.Call(m, "UpdateTaskStatus", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus
func (mr *MockAppVersionClientMockRecorder) UpdateTaskStatus(name, ts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockAppVersionClient)(nil).UpdateTaskStatus), name, ts)
}

// MockConfigMapClient is a mock of ConfigMapClient interface
type MockConfigMapClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapClientMockRecorder
}

// MockConfigMapClientMockRecorder is the mock recorder for MockConfigMapClient
type MockConfigMapClientMockRecorder struct {
	mock *MockConfigMapClient
}

// NewMockConfigMapClient creates a new mock instance
func NewMockConfigMapClient(ctrl *gomock.Controller) *MockConfigMapClient {
	mock := &MockConfigMapClient{ctrl: ctrl}
	mock.recorder = &MockConfigMapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigMapClient) EXPECT() *MockConfigMapClientMockRecorder {
	return m.recorder
}

// CreateConfigMap mocks base method
func (m *MockConfigMapClient) CreateConfigMap(namespace string, cm *v1.ConfigMap) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "CreateConfigMap", namespace, cm)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigMap indicates an expected call of CreateConfigMap
func (mr *MockConfigMapClientMockRecorder) CreateConfigMap(namespace, cm interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigMap", reflect.TypeOf((*MockConfigMapClient)(nil).CreateConfigMap), namespace, cm)
}

// AtomicUpdateConfigMap mocks base method
func (m *MockConfigMapClient) AtomicUpdateConfigMap(namespace, name string, fn types.ConfigMapModifier) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "AtomicUpdateConfigMap", namespace, name, fn)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicUpdateConfigMap indicates an expected call of AtomicUpdateConfigMap
func (mr *MockConfigMapClientMockRecorder) AtomicUpdateConfigMap(namespace, name, fn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicUpdateConfigMap", reflect.TypeOf((*MockConfigMapClient)(nil).AtomicUpdateConfigMap), namespace, name, fn)
}

// UpdateConfigMap mocks base method
func (m *MockConfigMapClient) UpdateConfigMap(arg0 *v1.ConfigMap) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "UpdateConfigMap", arg0)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigMap indicates an expected call of UpdateConfigMap
func (mr *MockConfigMapClientMockRecorder) UpdateConfigMap(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigMap", reflect.TypeOf((*MockConfigMapClient)(nil).UpdateConfigMap), arg0)
}

// GetConfigMap mocks base method
func (m *MockConfigMapClient) GetConfigMap(namespace, name string) (*v1.ConfigMap, error) {
	ret := m.ctrl.Call(m, "GetConfigMap", namespace, name)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMap indicates an expected call of GetConfigMap
func (mr *MockConfigMapClientMockRecorder) GetConfigMap(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMap", reflect.TypeOf((*MockConfigMapClient)(nil).GetConfigMap), namespace, name)
}

// ListConfigMapsWithLabels mocks base method
func (m *MockConfigMapClient) ListConfigMapsWithLabels(namespace string, labels labels.Set) (*v1.ConfigMapList, error) {
	ret := m.ctrl.Call(m, "ListConfigMapsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1.ConfigMapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConfigMapsWithLabels indicates an expected call of ListConfigMapsWithLabels
func (mr *MockConfigMapClientMockRecorder) ListConfigMapsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConfigMapsWithLabels", reflect.TypeOf((*MockConfigMapClient)(nil).ListConfigMapsWithLabels), namespace, labels)
}

// DeleteConfigMap mocks base method
func (m *MockConfigMapClient) DeleteConfigMap(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteConfigMap", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigMap indicates an expected call of DeleteConfigMap
func (mr *MockConfigMapClientMockRecorder) DeleteConfigMap(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigMap", reflect.TypeOf((*MockConfigMapClient)(nil).DeleteConfigMap), namespace, name, options)
}

// MockMigrationStatusClient is a mock of MigrationStatusClient interface
type MockMigrationStatusClient struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationStatusClientMockRecorder
}

// MockMigrationStatusClientMockRecorder is the mock recorder for MockMigrationStatusClient
type MockMigrationStatusClientMockRecorder struct {
	mock *MockMigrationStatusClient
}

// NewMockMigrationStatusClient creates a new mock instance
func NewMockMigrationStatusClient(ctrl *gomock.Controller) *MockMigrationStatusClient {
	mock := &MockMigrationStatusClient{ctrl: ctrl}
	mock.recorder = &MockMigrationStatusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationStatusClient) EXPECT() *MockMigrationStatusClientMockRecorder {
	return m.recorder
}

// GetMigrationStatus mocks base method
func (m *MockMigrationStatusClient) GetMigrationStatus(name string) (*types.MigrationStatus, error) {
	ret := m.ctrl.Call(m, "GetMigrationStatus", name)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrationStatus indicates an expected call of GetMigrationStatus
func (mr *MockMigrationStatusClientMockRecorder) GetMigrationStatus(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrationStatus", reflect.TypeOf((*MockMigrationStatusClient)(nil).GetMigrationStatus), name)
}

// CreateMigrationStatus mocks base method
func (m *MockMigrationStatusClient) CreateMigrationStatus(arg0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := m.ctrl.Call(m, "CreateMigrationStatus", arg0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMigrationStatus indicates an expected call of CreateMigrationStatus
func (mr *MockMigrationStatusClientMockRecorder) CreateMigrationStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationStatus", reflect.TypeOf((*MockMigrationStatusClient)(nil).CreateMigrationStatus), arg0)
}

// UpdateMigrationStatus mocks base method
func (m *MockMigrationStatusClient) UpdateMigrationStatus(arg0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := m.ctrl.Call(m, "UpdateMigrationStatus", arg0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMigrationStatus indicates an expected call of UpdateMigrationStatus
func (mr *MockMigrationStatusClientMockRecorder) UpdateMigrationStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMigrationStatus", reflect.TypeOf((*MockMigrationStatusClient)(nil).UpdateMigrationStatus), arg0)
}

// MockDaemonSetClient is a mock of DaemonSetClient interface
type MockDaemonSetClient struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonSetClientMockRecorder
}

// MockDaemonSetClientMockRecorder is the mock recorder for MockDaemonSetClient
type MockDaemonSetClientMockRecorder struct {
	mock *MockDaemonSetClient
}

// NewMockDaemonSetClient creates a new mock instance
func NewMockDaemonSetClient(ctrl *gomock.Controller) *MockDaemonSetClient {
	mock := &MockDaemonSetClient{ctrl: ctrl}
	mock.recorder = &MockDaemonSetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDaemonSetClient) EXPECT() *MockDaemonSetClientMockRecorder {
	return m.recorder
}

// CreateDaemonSet mocks base method
func (m *MockDaemonSetClient) CreateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, error) {
	ret := m.ctrl.Call(m, "CreateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDaemonSet indicates an expected call of CreateDaemonSet
func (mr *MockDaemonSetClientMockRecorder) CreateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).CreateDaemonSet), arg0)
}

// GetDaemonSet mocks base method
func (m *MockDaemonSetClient) GetDaemonSet(namespace, name string) (*v1beta2.DaemonSet, error) {
	ret := m.ctrl.Call(m, "GetDaemonSet", namespace, name)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaemonSet indicates an expected call of GetDaemonSet
func (mr *MockDaemonSetClientMockRecorder) GetDaemonSet(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).GetDaemonSet), namespace, name)
}

// DeleteDaemonSet mocks base method
func (m *MockDaemonSetClient) DeleteDaemonSet(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteDaemonSet", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDaemonSet indicates an expected call of DeleteDaemonSet
func (mr *MockDaemonSetClientMockRecorder) DeleteDaemonSet(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).DeleteDaemonSet), namespace, name, options)
}

// UpdateDaemonSet mocks base method
func (m *MockDaemonSetClient) UpdateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "UpdateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDaemonSet indicates an expected call of UpdateDaemonSet
func (mr *MockDaemonSetClientMockRecorder) UpdateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).UpdateDaemonSet), arg0)
}

// PatchDaemonSet mocks base method
func (m *MockDaemonSetClient) PatchDaemonSet(arg0, arg1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "PatchDaemonSet", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchDaemonSet indicates an expected call of PatchDaemonSet
func (mr *MockDaemonSetClientMockRecorder) PatchDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).PatchDaemonSet), arg0, arg1)
}

// RollingUpdateDaemonSet mocks base method
func (m *MockDaemonSetClient) RollingUpdateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDaemonSet indicates an expected call of RollingUpdateDaemonSet
func (mr *MockDaemonSetClientMockRecorder) RollingUpdateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).RollingUpdateDaemonSet), arg0)
}

// RollingPatchDaemonSet mocks base method
func (m *MockDaemonSetClient) RollingPatchDaemonSet(arg0, arg1 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDaemonSet", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDaemonSet indicates an expected call of RollingPatchDaemonSet
func (mr *MockDaemonSetClientMockRecorder) RollingPatchDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).RollingPatchDaemonSet), arg0, arg1)
}

// RollingUpdateDaemonSetMigrations mocks base method
func (m *MockDaemonSetClient) RollingUpdateDaemonSetMigrations(namespace, name string, f UpdateFunction, opts UpdateOpts) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDaemonSetMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDaemonSetMigrations indicates an expected call of RollingUpdateDaemonSetMigrations
func (mr *MockDaemonSetClientMockRecorder) RollingUpdateDaemonSetMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDaemonSetMigrations", reflect.TypeOf((*MockDaemonSetClient)(nil).RollingUpdateDaemonSetMigrations), namespace, name, f, opts)
}

// RollingPatchDaemonSetMigrations mocks base method
func (m *MockDaemonSetClient) RollingPatchDaemonSetMigrations(namespace, name string, f PatchFunction, opts UpdateOpts) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDaemonSetMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDaemonSetMigrations indicates an expected call of RollingPatchDaemonSetMigrations
func (mr *MockDaemonSetClientMockRecorder) RollingPatchDaemonSetMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDaemonSetMigrations", reflect.TypeOf((*MockDaemonSetClient)(nil).RollingPatchDaemonSetMigrations), namespace, name, f, opts)
}

// CreateOrRollingUpdateDaemonSet mocks base method
func (m *MockDaemonSetClient) CreateOrRollingUpdateDaemonSet(arg0 *v1beta2.DaemonSet) (*v1beta2.DaemonSet, bool, error) {
	ret := m.ctrl.Call(m, "CreateOrRollingUpdateDaemonSet", arg0)
	ret0, _ := ret[0].(*v1beta2.DaemonSet)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrRollingUpdateDaemonSet indicates an expected call of CreateOrRollingUpdateDaemonSet
func (mr *MockDaemonSetClientMockRecorder) CreateOrRollingUpdateDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrRollingUpdateDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).CreateOrRollingUpdateDaemonSet), arg0)
}

// NumberOfDesiredPodsForDaemonSet mocks base method
func (m *MockDaemonSetClient) NumberOfDesiredPodsForDaemonSet(arg0 *v1beta2.DaemonSet) (int, error) {
	ret := m.ctrl.Call(m, "NumberOfDesiredPodsForDaemonSet", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfDesiredPodsForDaemonSet indicates an expected call of NumberOfDesiredPodsForDaemonSet
func (mr *MockDaemonSetClientMockRecorder) NumberOfDesiredPodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfDesiredPodsForDaemonSet", reflect.TypeOf((*MockDaemonSetClient)(nil).NumberOfDesiredPodsForDaemonSet), arg0)
}

// ListDaemonSetsWithLabels mocks base method
func (m *MockDaemonSetClient) ListDaemonSetsWithLabels(namespace string, labels labels.Set) (*v1beta2.DaemonSetList, error) {
	ret := m.ctrl.Call(m, "ListDaemonSetsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1beta2.DaemonSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDaemonSetsWithLabels indicates an expected call of ListDaemonSetsWithLabels
func (mr *MockDaemonSetClientMockRecorder) ListDaemonSetsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDaemonSetsWithLabels", reflect.TypeOf((*MockDaemonSetClient)(nil).ListDaemonSetsWithLabels), namespace, labels)
}

// MockPodClient is a mock of PodClient interface
type MockPodClient struct {
	ctrl     *gomock.Controller
	recorder *MockPodClientMockRecorder
}

// MockPodClientMockRecorder is the mock recorder for MockPodClient
type MockPodClientMockRecorder struct {
	mock *MockPodClient
}

// NewMockPodClient creates a new mock instance
func NewMockPodClient(ctrl *gomock.Controller) *MockPodClient {
	mock := &MockPodClient{ctrl: ctrl}
	mock.recorder = &MockPodClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodClient) EXPECT() *MockPodClientMockRecorder {
	return m.recorder
}

// DeletePod mocks base method
func (m *MockPodClient) DeletePod(namespace, name string) error {
	ret := m.ctrl.Call(m, "DeletePod", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod
func (mr *MockPodClientMockRecorder) DeletePod(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockPodClient)(nil).DeletePod), namespace, name)
}

// ListPodsWithLabels mocks base method
func (m *MockPodClient) ListPodsWithLabels(namespace string, labels labels.Set) (*v1.PodList, error) {
	ret := m.ctrl.Call(m, "ListPodsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodsWithLabels indicates an expected call of ListPodsWithLabels
func (mr *MockPodClientMockRecorder) ListPodsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodsWithLabels", reflect.TypeOf((*MockPodClient)(nil).ListPodsWithLabels), namespace, labels)
}

// MockDeploymentClient is a mock of DeploymentClient interface
type MockDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentClientMockRecorder
}

// MockDeploymentClientMockRecorder is the mock recorder for MockDeploymentClient
type MockDeploymentClientMockRecorder struct {
	mock *MockDeploymentClient
}

// NewMockDeploymentClient creates a new mock instance
func NewMockDeploymentClient(ctrl *gomock.Controller) *MockDeploymentClient {
	mock := &MockDeploymentClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentClient) EXPECT() *MockDeploymentClientMockRecorder {
	return m.recorder
}

// GetDeployment mocks base method
func (m *MockDeploymentClient) GetDeployment(namespace, name string) (*v1beta2.Deployment, error) {
	ret := m.ctrl.Call(m, "GetDeployment", namespace, name)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockDeploymentClientMockRecorder) GetDeployment(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).GetDeployment), namespace, name)
}

// CreateDeployment mocks base method
func (m *MockDeploymentClient) CreateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, error) {
	ret := m.ctrl.Call(m, "CreateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockDeploymentClientMockRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).CreateDeployment), arg0)
}

// DeleteDeployment mocks base method
func (m *MockDeploymentClient) DeleteDeployment(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteDeployment", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockDeploymentClientMockRecorder) DeleteDeployment(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).DeleteDeployment), namespace, name, options)
}

// UpdateDeployment mocks base method
func (m *MockDeploymentClient) UpdateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "UpdateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDeployment indicates an expected call of UpdateDeployment
func (mr *MockDeploymentClientMockRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).UpdateDeployment), arg0)
}

// PatchDeployment mocks base method
func (m *MockDeploymentClient) PatchDeployment(arg0, arg1 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "PatchDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchDeployment indicates an expected call of PatchDeployment
func (mr *MockDeploymentClientMockRecorder) PatchDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).PatchDeployment), arg0, arg1)
}

// RollingUpdateDeployment mocks base method
func (m *MockDeploymentClient) RollingUpdateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDeployment indicates an expected call of RollingUpdateDeployment
func (mr *MockDeploymentClientMockRecorder) RollingUpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).RollingUpdateDeployment), arg0)
}

// RollingPatchDeployment mocks base method
func (m *MockDeploymentClient) RollingPatchDeployment(arg0, arg1 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDeployment", arg0, arg1)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDeployment indicates an expected call of RollingPatchDeployment
func (mr *MockDeploymentClientMockRecorder) RollingPatchDeployment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).RollingPatchDeployment), arg0, arg1)
}

// RollingUpdateDeploymentMigrations mocks base method
func (m *MockDeploymentClient) RollingUpdateDeploymentMigrations(namespace, name string, f UpdateFunction, opts UpdateOpts) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingUpdateDeploymentMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingUpdateDeploymentMigrations indicates an expected call of RollingUpdateDeploymentMigrations
func (mr *MockDeploymentClientMockRecorder) RollingUpdateDeploymentMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateDeploymentMigrations", reflect.TypeOf((*MockDeploymentClient)(nil).RollingUpdateDeploymentMigrations), namespace, name, f, opts)
}

// RollingPatchDeploymentMigrations mocks base method
func (m *MockDeploymentClient) RollingPatchDeploymentMigrations(namespace, name string, f PatchFunction, opts UpdateOpts) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "RollingPatchDeploymentMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollingPatchDeploymentMigrations indicates an expected call of RollingPatchDeploymentMigrations
func (mr *MockDeploymentClientMockRecorder) RollingPatchDeploymentMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingPatchDeploymentMigrations", reflect.TypeOf((*MockDeploymentClient)(nil).RollingPatchDeploymentMigrations), namespace, name, f, opts)
}

// CreateOrRollingUpdateDeployment mocks base method
func (m *MockDeploymentClient) CreateOrRollingUpdateDeployment(arg0 *v1beta2.Deployment) (*v1beta2.Deployment, bool, error) {
	ret := m.ctrl.Call(m, "CreateOrRollingUpdateDeployment", arg0)
	ret0, _ := ret[0].(*v1beta2.Deployment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrRollingUpdateDeployment indicates an expected call of CreateOrRollingUpdateDeployment
func (mr *MockDeploymentClientMockRecorder) CreateOrRollingUpdateDeployment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrRollingUpdateDeployment", reflect.TypeOf((*MockDeploymentClient)(nil).CreateOrRollingUpdateDeployment), arg0)
}

// ListDeploymentsWithLabels mocks base method
func (m *MockDeploymentClient) ListDeploymentsWithLabels(namespace string, labels labels.Set) (*v1beta2.DeploymentList, error) {
	ret := m.ctrl.Call(m, "ListDeploymentsWithLabels", namespace, labels)
	ret0, _ := ret[0].(*v1beta2.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsWithLabels indicates an expected call of ListDeploymentsWithLabels
func (mr *MockDeploymentClientMockRecorder) ListDeploymentsWithLabels(namespace, labels interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsWithLabels", reflect.TypeOf((*MockDeploymentClient)(nil).ListDeploymentsWithLabels), namespace, labels)
}

// MockServiceClient is a mock of ServiceClient interface
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceClientMockRecorder
}

// MockServiceClientMockRecorder is the mock recorder for MockServiceClient
type MockServiceClientMockRecorder struct {
	mock *MockServiceClient
}

// NewMockServiceClient creates a new mock instance
func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &MockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceClient) EXPECT() *MockServiceClientMockRecorder {
	return m.recorder
}

// GetService mocks base method
func (m *MockServiceClient) GetService(namespace, name string) (*v1.Service, error) {
	ret := m.ctrl.Call(m, "GetService", namespace, name)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockServiceClientMockRecorder) GetService(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceClient)(nil).GetService), namespace, name)
}

// CreateService mocks base method
func (m *MockServiceClient) CreateService(arg0 *v1.Service) (*v1.Service, error) {
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockServiceClientMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceClient)(nil).CreateService), arg0)
}

// DeleteService mocks base method
func (m *MockServiceClient) DeleteService(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteService", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockServiceClientMockRecorder) DeleteService(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServiceClient)(nil).DeleteService), namespace, name, options)
}

// UpdateService mocks base method
func (m *MockServiceClient) UpdateService(arg0 *v1.Service) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockServiceClientMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceClient)(nil).UpdateService), arg0)
}

// PatchService mocks base method
func (m *MockServiceClient) PatchService(arg0, arg1 *v1.Service) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "PatchService", arg0, arg1)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchService indicates an expected call of PatchService
func (mr *MockServiceClientMockRecorder) PatchService(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchService", reflect.TypeOf((*MockServiceClient)(nil).PatchService), arg0, arg1)
}

// UpdateServiceMigrations mocks base method
func (m *MockServiceClient) UpdateServiceMigrations(namespace, name string, f UpdateFunction, opts UpdateOpts) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "UpdateServiceMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateServiceMigrations indicates an expected call of UpdateServiceMigrations
func (mr *MockServiceClientMockRecorder) UpdateServiceMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceMigrations", reflect.TypeOf((*MockServiceClient)(nil).UpdateServiceMigrations), namespace, name, f, opts)
}

// PatchServiceMigrations mocks base method
func (m *MockServiceClient) PatchServiceMigrations(namespace, name string, f PatchFunction, opts UpdateOpts) (*v1.Service, bool, error) {
	ret := m.ctrl.Call(m, "PatchServiceMigrations", namespace, name, f, opts)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PatchServiceMigrations indicates an expected call of PatchServiceMigrations
func (mr *MockServiceClientMockRecorder) PatchServiceMigrations(namespace, name, f, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchServiceMigrations", reflect.TypeOf((*MockServiceClient)(nil).PatchServiceMigrations), namespace, name, f, opts)
}

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// ListNodes mocks base method
func (m *MockNodeClient) ListNodes(arg0 v11.ListOptions) (*v1.NodeList, error) {
	ret := m.ctrl.Call(m, "ListNodes", arg0)
	ret0, _ := ret[0].(*v1.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes
func (mr *MockNodeClientMockRecorder) ListNodes(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockNodeClient)(nil).ListNodes), arg0)
}

// GetNode mocks base method
func (m *MockNodeClient) GetNode(name string) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "GetNode", name)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockNodeClientMockRecorder) GetNode(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeClient)(nil).GetNode), name)
}

// UpdateNode mocks base method
func (m *MockNodeClient) UpdateNode(arg0 *v1.Node) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "UpdateNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode
func (mr *MockNodeClientMockRecorder) UpdateNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockNodeClient)(nil).UpdateNode), arg0)
}

// AtomicUpdateNode mocks base method
func (m *MockNodeClient) AtomicUpdateNode(name string, f types.NodeModifier) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "AtomicUpdateNode", name, f)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtomicUpdateNode indicates an expected call of AtomicUpdateNode
func (mr *MockNodeClientMockRecorder) AtomicUpdateNode(name, f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicUpdateNode", reflect.TypeOf((*MockNodeClient)(nil).AtomicUpdateNode), name, f)
}

// DrainNode mocks base method
func (m *MockNodeClient) DrainNode(arg0 *v1.Node) error {
	ret := m.ctrl.Call(m, "DrainNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DrainNode indicates an expected call of DrainNode
func (mr *MockNodeClientMockRecorder) DrainNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrainNode", reflect.TypeOf((*MockNodeClient)(nil).DrainNode), arg0)
}

// OptimisticDrainNode mocks base method
func (m *MockNodeClient) OptimisticDrainNode(arg0 *v1.Node) error {
	ret := m.ctrl.Call(m, "OptimisticDrainNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OptimisticDrainNode indicates an expected call of OptimisticDrainNode
func (mr *MockNodeClientMockRecorder) OptimisticDrainNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptimisticDrainNode", reflect.TypeOf((*MockNodeClient)(nil).OptimisticDrainNode), arg0)
}

// UnCordonNode mocks base method
func (m *MockNodeClient) UnCordonNode(arg0 *v1.Node) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "UnCordonNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnCordonNode indicates an expected call of UnCordonNode
func (mr *MockNodeClientMockRecorder) UnCordonNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnCordonNode", reflect.TypeOf((*MockNodeClient)(nil).UnCordonNode), arg0)
}

// CordonNode mocks base method
func (m *MockNodeClient) CordonNode(arg0 *v1.Node) (*v1.Node, error) {
	ret := m.ctrl.Call(m, "CordonNode", arg0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CordonNode indicates an expected call of CordonNode
func (mr *MockNodeClientMockRecorder) CordonNode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CordonNode", reflect.TypeOf((*MockNodeClient)(nil).CordonNode), arg0)
}

// MockCustomResourceDefinitionClient is a mock of CustomResourceDefinitionClient interface
type MockCustomResourceDefinitionClient struct {
	ctrl     *gomock.Controller
	recorder *MockCustomResourceDefinitionClientMockRecorder
}

// MockCustomResourceDefinitionClientMockRecorder is the mock recorder for MockCustomResourceDefinitionClient
type MockCustomResourceDefinitionClientMockRecorder struct {
	mock *MockCustomResourceDefinitionClient
}

// NewMockCustomResourceDefinitionClient creates a new mock instance
func NewMockCustomResourceDefinitionClient(ctrl *gomock.Controller) *MockCustomResourceDefinitionClient {
	mock := &MockCustomResourceDefinitionClient{ctrl: ctrl}
	mock.recorder = &MockCustomResourceDefinitionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomResourceDefinitionClient) EXPECT() *MockCustomResourceDefinitionClientMockRecorder {
	return m.recorder
}

// GetCustomResourceDefinition mocks base method
func (m *MockCustomResourceDefinitionClient) GetCustomResourceDefinition(name string) (*v1beta11.CustomResourceDefinition, error) {
	ret := m.ctrl.Call(m, "GetCustomResourceDefinition", name)
	ret0, _ := ret[0].(*v1beta11.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResourceDefinition indicates an expected call of GetCustomResourceDefinition
func (mr *MockCustomResourceDefinitionClientMockRecorder) GetCustomResourceDefinition(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).GetCustomResourceDefinition), name)
}

// CreateCustomResourceDefinition mocks base method
func (m *MockCustomResourceDefinitionClient) CreateCustomResourceDefinition(crd *v1beta11.CustomResourceDefinition) error {
	ret := m.ctrl.Call(m, "CreateCustomResourceDefinition", crd)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceDefinition indicates an expected call of CreateCustomResourceDefinition
func (mr *MockCustomResourceDefinitionClientMockRecorder) CreateCustomResourceDefinition(crd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).CreateCustomResourceDefinition), crd)
}

// UpdateCustomResourceDefinition mocks base method
func (m *MockCustomResourceDefinitionClient) UpdateCustomResourceDefinition(modified *v1beta11.CustomResourceDefinition) error {
	ret := m.ctrl.Call(m, "UpdateCustomResourceDefinition", modified)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResourceDefinition indicates an expected call of UpdateCustomResourceDefinition
func (mr *MockCustomResourceDefinitionClientMockRecorder) UpdateCustomResourceDefinition(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).UpdateCustomResourceDefinition), modified)
}

// DeleteCustomResourceDefinition mocks base method
func (m *MockCustomResourceDefinitionClient) DeleteCustomResourceDefinition(name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteCustomResourceDefinition", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResourceDefinition indicates an expected call of DeleteCustomResourceDefinition
func (mr *MockCustomResourceDefinitionClientMockRecorder) DeleteCustomResourceDefinition(name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).DeleteCustomResourceDefinition), name, options)
}

// EnsureCustomResourceDefinition mocks base method
func (m *MockCustomResourceDefinitionClient) EnsureCustomResourceDefinition(crd *v1beta11.CustomResourceDefinition) error {
	ret := m.ctrl.Call(m, "EnsureCustomResourceDefinition", crd)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureCustomResourceDefinition indicates an expected call of EnsureCustomResourceDefinition
func (mr *MockCustomResourceDefinitionClientMockRecorder) EnsureCustomResourceDefinition(crd interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureCustomResourceDefinition", reflect.TypeOf((*MockCustomResourceDefinitionClient)(nil).EnsureCustomResourceDefinition), crd)
}

// MockCustomResourceClient is a mock of CustomResourceClient interface
type MockCustomResourceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCustomResourceClientMockRecorder
}

// MockCustomResourceClientMockRecorder is the mock recorder for MockCustomResourceClient
type MockCustomResourceClientMockRecorder struct {
	mock *MockCustomResourceClient
}

// NewMockCustomResourceClient creates a new mock instance
func NewMockCustomResourceClient(ctrl *gomock.Controller) *MockCustomResourceClient {
	mock := &MockCustomResourceClient{ctrl: ctrl}
	mock.recorder = &MockCustomResourceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomResourceClient) EXPECT() *MockCustomResourceClientMockRecorder {
	return m.recorder
}

// GetCustomResource mocks base method
func (m *MockCustomResourceClient) GetCustomResource(apiGroup, version, namespace, resourceKind, resourceName string) (*unstructured.Unstructured, error) {
	ret := m.ctrl.Call(m, "GetCustomResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResource indicates an expected call of GetCustomResource
func (mr *MockCustomResourceClientMockRecorder) GetCustomResource(apiGroup, version, namespace, resourceKind, resourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResource", reflect.TypeOf((*MockCustomResourceClient)(nil).GetCustomResource), apiGroup, version, namespace, resourceKind, resourceName)
}

// GetCustomResourceRaw mocks base method
func (m *MockCustomResourceClient) GetCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName string) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetCustomResourceRaw", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomResourceRaw indicates an expected call of GetCustomResourceRaw
func (mr *MockCustomResourceClientMockRecorder) GetCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomResourceRaw", reflect.TypeOf((*MockCustomResourceClient)(nil).GetCustomResourceRaw), apiGroup, version, namespace, resourceKind, resourceName)
}

// CreateCustomResource mocks base method
func (m *MockCustomResourceClient) CreateCustomResource(item *unstructured.Unstructured) error {
	ret := m.ctrl.Call(m, "CreateCustomResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResource indicates an expected call of CreateCustomResource
func (mr *MockCustomResourceClientMockRecorder) CreateCustomResource(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResource", reflect.TypeOf((*MockCustomResourceClient)(nil).CreateCustomResource), item)
}

// CreateCustomResourceRaw mocks base method
func (m *MockCustomResourceClient) CreateCustomResourceRaw(apiGroup, version, namespace, kind string, data []byte) error {
	ret := m.ctrl.Call(m, "CreateCustomResourceRaw", apiGroup, version, namespace, kind, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomResourceRaw indicates an expected call of CreateCustomResourceRaw
func (mr *MockCustomResourceClientMockRecorder) CreateCustomResourceRaw(apiGroup, version, namespace, kind, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceRaw", reflect.TypeOf((*MockCustomResourceClient)(nil).CreateCustomResourceRaw), apiGroup, version, namespace, kind, data)
}

// CreateCustomResourceRawIfNotFound mocks base method
func (m *MockCustomResourceClient) CreateCustomResourceRawIfNotFound(apiGroup, version, namespace, kind, name string, data []byte) (bool, error) {
	ret := m.ctrl.Call(m, "CreateCustomResourceRawIfNotFound", apiGroup, version, namespace, kind, name, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomResourceRawIfNotFound indicates an expected call of CreateCustomResourceRawIfNotFound
func (mr *MockCustomResourceClientMockRecorder) CreateCustomResourceRawIfNotFound(apiGroup, version, namespace, kind, name, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomResourceRawIfNotFound", reflect.TypeOf((*MockCustomResourceClient)(nil).CreateCustomResourceRawIfNotFound), apiGroup, version, namespace, kind, name, data)
}

// UpdateCustomResource mocks base method
func (m *MockCustomResourceClient) UpdateCustomResource(item *unstructured.Unstructured) error {
	ret := m.ctrl.Call(m, "UpdateCustomResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResource indicates an expected call of UpdateCustomResource
func (mr *MockCustomResourceClientMockRecorder) UpdateCustomResource(item interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResource", reflect.TypeOf((*MockCustomResourceClient)(nil).UpdateCustomResource), item)
}

// UpdateCustomResourceRaw mocks base method
func (m *MockCustomResourceClient) UpdateCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName string, data []byte) error {
	ret := m.ctrl.Call(m, "UpdateCustomResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomResourceRaw indicates an expected call of UpdateCustomResourceRaw
func (mr *MockCustomResourceClientMockRecorder) UpdateCustomResourceRaw(apiGroup, version, namespace, resourceKind, resourceName, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomResourceRaw", reflect.TypeOf((*MockCustomResourceClient)(nil).UpdateCustomResourceRaw), apiGroup, version, namespace, resourceKind, resourceName, data)
}

// CreateOrUpdateCustomeResourceRaw mocks base method
func (m *MockCustomResourceClient) CreateOrUpdateCustomeResourceRaw(apiGroup, version, namespace, resourceKind, resourceName string, data []byte) error {
	ret := m.ctrl.Call(m, "CreateOrUpdateCustomeResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateCustomeResourceRaw indicates an expected call of CreateOrUpdateCustomeResourceRaw
func (mr *MockCustomResourceClientMockRecorder) CreateOrUpdateCustomeResourceRaw(apiGroup, version, namespace, resourceKind, resourceName, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCustomeResourceRaw", reflect.TypeOf((*MockCustomResourceClient)(nil).CreateOrUpdateCustomeResourceRaw), apiGroup, version, namespace, resourceKind, resourceName, data)
}

// DeleteCustomResource mocks base method
func (m *MockCustomResourceClient) DeleteCustomResource(apiGroup, version, namespace, resourceKind, resourceName string) error {
	ret := m.ctrl.Call(m, "DeleteCustomResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomResource indicates an expected call of DeleteCustomResource
func (mr *MockCustomResourceClientMockRecorder) DeleteCustomResource(apiGroup, version, namespace, resourceKind, resourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomResource", reflect.TypeOf((*MockCustomResourceClient)(nil).DeleteCustomResource), apiGroup, version, namespace, resourceKind, resourceName)
}

// AtomicModifyCustomResource mocks base method
func (m *MockCustomResourceClient) AtomicModifyCustomResource(apiGroup, version, namespace, resourceKind, resourceName string, f CustomResourceModifier, data interface{}) error {
	ret := m.ctrl.Call(m, "AtomicModifyCustomResource", apiGroup, version, namespace, resourceKind, resourceName, f, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AtomicModifyCustomResource indicates an expected call of AtomicModifyCustomResource
func (mr *MockCustomResourceClientMockRecorder) AtomicModifyCustomResource(apiGroup, version, namespace, resourceKind, resourceName, f, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicModifyCustomResource", reflect.TypeOf((*MockCustomResourceClient)(nil).AtomicModifyCustomResource), apiGroup, version, namespace, resourceKind, resourceName, f, data)
}

// ListCustomResource mocks base method
func (m *MockCustomResourceClient) ListCustomResource(apiGroup, version, namespace, resourceKind string) (*CustomResourceList, error) {
	ret := m.ctrl.Call(m, "ListCustomResource", apiGroup, version, namespace, resourceKind)
	ret0, _ := ret[0].(*CustomResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomResource indicates an expected call of ListCustomResource
func (mr *MockCustomResourceClientMockRecorder) ListCustomResource(apiGroup, version, namespace, resourceKind interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomResource", reflect.TypeOf((*MockCustomResourceClient)(nil).ListCustomResource), apiGroup, version, namespace, resourceKind)
}

// MockIngressClient is a mock of IngressClient interface
type MockIngressClient struct {
	ctrl     *gomock.Controller
	recorder *MockIngressClientMockRecorder
}

// MockIngressClientMockRecorder is the mock recorder for MockIngressClient
type MockIngressClientMockRecorder struct {
	mock *MockIngressClient
}

// NewMockIngressClient creates a new mock instance
func NewMockIngressClient(ctrl *gomock.Controller) *MockIngressClient {
	mock := &MockIngressClient{ctrl: ctrl}
	mock.recorder = &MockIngressClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIngressClient) EXPECT() *MockIngressClientMockRecorder {
	return m.recorder
}

// CreateIngress mocks base method
func (m *MockIngressClient) CreateIngress(arg0 *v1beta1.Ingress) (*v1beta1.Ingress, error) {
	ret := m.ctrl.Call(m, "CreateIngress", arg0)
	ret0, _ := ret[0].(*v1beta1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngress indicates an expected call of CreateIngress
func (mr *MockIngressClientMockRecorder) CreateIngress(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngress", reflect.TypeOf((*MockIngressClient)(nil).CreateIngress), arg0)
}

// GetIngress mocks base method
func (m *MockIngressClient) GetIngress(namespace, name string) (*v1beta1.Ingress, error) {
	ret := m.ctrl.Call(m, "GetIngress", namespace, name)
	ret0, _ := ret[0].(*v1beta1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngress indicates an expected call of GetIngress
func (mr *MockIngressClientMockRecorder) GetIngress(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngress", reflect.TypeOf((*MockIngressClient)(nil).GetIngress), namespace, name)
}

// UpdateIngress mocks base method
func (m *MockIngressClient) UpdateIngress(original, modified *v1beta1.Ingress) (*v1beta1.Ingress, bool, error) {
	ret := m.ctrl.Call(m, "UpdateIngress", original, modified)
	ret0, _ := ret[0].(*v1beta1.Ingress)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIngress indicates an expected call of UpdateIngress
func (mr *MockIngressClientMockRecorder) UpdateIngress(original, modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngress", reflect.TypeOf((*MockIngressClient)(nil).UpdateIngress), original, modified)
}

// DeleteIngress mocks base method
func (m *MockIngressClient) DeleteIngress(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteIngress", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngress indicates an expected call of DeleteIngress
func (mr *MockIngressClientMockRecorder) DeleteIngress(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngress", reflect.TypeOf((*MockIngressClient)(nil).DeleteIngress), namespace, name, options)
}

// MockServiceAccountClient is a mock of ServiceAccountClient interface
type MockServiceAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAccountClientMockRecorder
}

// MockServiceAccountClientMockRecorder is the mock recorder for MockServiceAccountClient
type MockServiceAccountClientMockRecorder struct {
	mock *MockServiceAccountClient
}

// NewMockServiceAccountClient creates a new mock instance
func NewMockServiceAccountClient(ctrl *gomock.Controller) *MockServiceAccountClient {
	mock := &MockServiceAccountClient{ctrl: ctrl}
	mock.recorder = &MockServiceAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceAccountClient) EXPECT() *MockServiceAccountClientMockRecorder {
	return m.recorder
}

// CreateServiceAccount mocks base method
func (m *MockServiceAccountClient) CreateServiceAccount(arg0 *v1.ServiceAccount) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "CreateServiceAccount", arg0)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount
func (mr *MockServiceAccountClientMockRecorder) CreateServiceAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockServiceAccountClient)(nil).CreateServiceAccount), arg0)
}

// GetServiceAccount mocks base method
func (m *MockServiceAccountClient) GetServiceAccount(namespace, name string) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "GetServiceAccount", namespace, name)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount
func (mr *MockServiceAccountClientMockRecorder) GetServiceAccount(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockServiceAccountClient)(nil).GetServiceAccount), namespace, name)
}

// UpdateServiceAccount mocks base method
func (m *MockServiceAccountClient) UpdateServiceAccount(modified *v1.ServiceAccount) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "UpdateServiceAccount", modified)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount
func (mr *MockServiceAccountClientMockRecorder) UpdateServiceAccount(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockServiceAccountClient)(nil).UpdateServiceAccount), modified)
}

// DeleteServiceAccount mocks base method
func (m *MockServiceAccountClient) DeleteServiceAccount(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteServiceAccount", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount
func (mr *MockServiceAccountClientMockRecorder) DeleteServiceAccount(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockServiceAccountClient)(nil).DeleteServiceAccount), namespace, name, options)
}

// MockClusterRoleBindingClient is a mock of ClusterRoleBindingClient interface
type MockClusterRoleBindingClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleBindingClientMockRecorder
}

// MockClusterRoleBindingClientMockRecorder is the mock recorder for MockClusterRoleBindingClient
type MockClusterRoleBindingClientMockRecorder struct {
	mock *MockClusterRoleBindingClient
}

// NewMockClusterRoleBindingClient creates a new mock instance
func NewMockClusterRoleBindingClient(ctrl *gomock.Controller) *MockClusterRoleBindingClient {
	mock := &MockClusterRoleBindingClient{ctrl: ctrl}
	mock.recorder = &MockClusterRoleBindingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRoleBindingClient) EXPECT() *MockClusterRoleBindingClientMockRecorder {
	return m.recorder
}

// CreateClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingClient) CreateClusterRoleBinding(arg0 *v10.ClusterRoleBinding) (*v10.ClusterRoleBinding, error) {
	ret := m.ctrl.Call(m, "CreateClusterRoleBinding", arg0)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterRoleBinding indicates an expected call of CreateClusterRoleBinding
func (mr *MockClusterRoleBindingClientMockRecorder) CreateClusterRoleBinding(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).CreateClusterRoleBinding), arg0)
}

// GetClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingClient) GetClusterRoleBinding(name string) (*v10.ClusterRoleBinding, error) {
	ret := m.ctrl.Call(m, "GetClusterRoleBinding", name)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRoleBinding indicates an expected call of GetClusterRoleBinding
func (mr *MockClusterRoleBindingClientMockRecorder) GetClusterRoleBinding(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).GetClusterRoleBinding), name)
}

// UpdateClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingClient) UpdateClusterRoleBinding(modified *v10.ClusterRoleBinding) (*v10.ClusterRoleBinding, error) {
	ret := m.ctrl.Call(m, "UpdateClusterRoleBinding", modified)
	ret0, _ := ret[0].(*v10.ClusterRoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterRoleBinding indicates an expected call of UpdateClusterRoleBinding
func (mr *MockClusterRoleBindingClientMockRecorder) UpdateClusterRoleBinding(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).UpdateClusterRoleBinding), modified)
}

// DeleteClusterRoleBinding mocks base method
func (m *MockClusterRoleBindingClient) DeleteClusterRoleBinding(name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteClusterRoleBinding", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRoleBinding indicates an expected call of DeleteClusterRoleBinding
func (mr *MockClusterRoleBindingClientMockRecorder) DeleteClusterRoleBinding(name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRoleBinding", reflect.TypeOf((*MockClusterRoleBindingClient)(nil).DeleteClusterRoleBinding), name, options)
}

// MockClusterRoleClient is a mock of ClusterRoleClient interface
type MockClusterRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRoleClientMockRecorder
}

// MockClusterRoleClientMockRecorder is the mock recorder for MockClusterRoleClient
type MockClusterRoleClientMockRecorder struct {
	mock *MockClusterRoleClient
}

// NewMockClusterRoleClient creates a new mock instance
func NewMockClusterRoleClient(ctrl *gomock.Controller) *MockClusterRoleClient {
	mock := &MockClusterRoleClient{ctrl: ctrl}
	mock.recorder = &MockClusterRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterRoleClient) EXPECT() *MockClusterRoleClientMockRecorder {
	return m.recorder
}

// CreateClusterRole mocks base method
func (m *MockClusterRoleClient) CreateClusterRole(arg0 *v10.ClusterRole) (*v10.ClusterRole, error) {
	ret := m.ctrl.Call(m, "CreateClusterRole", arg0)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterRole indicates an expected call of CreateClusterRole
func (mr *MockClusterRoleClientMockRecorder) CreateClusterRole(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).CreateClusterRole), arg0)
}

// GetClusterRole mocks base method
func (m *MockClusterRoleClient) GetClusterRole(name string) (*v10.ClusterRole, error) {
	ret := m.ctrl.Call(m, "GetClusterRole", name)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterRole indicates an expected call of GetClusterRole
func (mr *MockClusterRoleClientMockRecorder) GetClusterRole(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).GetClusterRole), name)
}

// UpdateClusterRole mocks base method
func (m *MockClusterRoleClient) UpdateClusterRole(modified *v10.ClusterRole) (*v10.ClusterRole, error) {
	ret := m.ctrl.Call(m, "UpdateClusterRole", modified)
	ret0, _ := ret[0].(*v10.ClusterRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterRole indicates an expected call of UpdateClusterRole
func (mr *MockClusterRoleClientMockRecorder) UpdateClusterRole(modified interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).UpdateClusterRole), modified)
}

// DeleteClusterRole mocks base method
func (m *MockClusterRoleClient) DeleteClusterRole(name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeleteClusterRole", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterRole indicates an expected call of DeleteClusterRole
func (mr *MockClusterRoleClientMockRecorder) DeleteClusterRole(name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterRole", reflect.TypeOf((*MockClusterRoleClient)(nil).DeleteClusterRole), name, options)
}

// MockPodDisruptionBudgetClient is a mock of PodDisruptionBudgetClient interface
type MockPodDisruptionBudgetClient struct {
	ctrl     *gomock.Controller
	recorder *MockPodDisruptionBudgetClientMockRecorder
}

// MockPodDisruptionBudgetClientMockRecorder is the mock recorder for MockPodDisruptionBudgetClient
type MockPodDisruptionBudgetClientMockRecorder struct {
	mock *MockPodDisruptionBudgetClient
}

// NewMockPodDisruptionBudgetClient creates a new mock instance
func NewMockPodDisruptionBudgetClient(ctrl *gomock.Controller) *MockPodDisruptionBudgetClient {
	mock := &MockPodDisruptionBudgetClient{ctrl: ctrl}
	mock.recorder = &MockPodDisruptionBudgetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodDisruptionBudgetClient) EXPECT() *MockPodDisruptionBudgetClientMockRecorder {
	return m.recorder
}

// CreatePodDisruptionBudget mocks base method
func (m *MockPodDisruptionBudgetClient) CreatePodDisruptionBudget(arg0 *v1beta10.PodDisruptionBudget) (*v1beta10.PodDisruptionBudget, error) {
	ret := m.ctrl.Call(m, "CreatePodDisruptionBudget", arg0)
	ret0, _ := ret[0].(*v1beta10.PodDisruptionBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePodDisruptionBudget indicates an expected call of CreatePodDisruptionBudget
func (mr *MockPodDisruptionBudgetClientMockRecorder) CreatePodDisruptionBudget(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodDisruptionBudget", reflect.TypeOf((*MockPodDisruptionBudgetClient)(nil).CreatePodDisruptionBudget), arg0)
}

// GetPodDisruptionBudget mocks base method
func (m *MockPodDisruptionBudgetClient) GetPodDisruptionBudget(namespace, name string) (*v1beta10.PodDisruptionBudget, error) {
	ret := m.ctrl.Call(m, "GetPodDisruptionBudget", namespace, name)
	ret0, _ := ret[0].(*v1beta10.PodDisruptionBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodDisruptionBudget indicates an expected call of GetPodDisruptionBudget
func (mr *MockPodDisruptionBudgetClientMockRecorder) GetPodDisruptionBudget(namespace, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodDisruptionBudget", reflect.TypeOf((*MockPodDisruptionBudgetClient)(nil).GetPodDisruptionBudget), namespace, name)
}

// UpdatePodDisruptionBudget mocks base method
func (m *MockPodDisruptionBudgetClient) UpdatePodDisruptionBudget(arg0 *v1beta10.PodDisruptionBudget) (*v1beta10.PodDisruptionBudget, error) {
	ret := m.ctrl.Call(m, "UpdatePodDisruptionBudget", arg0)
	ret0, _ := ret[0].(*v1beta10.PodDisruptionBudget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePodDisruptionBudget indicates an expected call of UpdatePodDisruptionBudget
func (mr *MockPodDisruptionBudgetClientMockRecorder) UpdatePodDisruptionBudget(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePodDisruptionBudget", reflect.TypeOf((*MockPodDisruptionBudgetClient)(nil).UpdatePodDisruptionBudget), arg0)
}

// DeletePodDisruptionBudget mocks base method
func (m *MockPodDisruptionBudgetClient) DeletePodDisruptionBudget(namespace, name string, options *v11.DeleteOptions) error {
	ret := m.ctrl.Call(m, "DeletePodDisruptionBudget", namespace, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePodDisruptionBudget indicates an expected call of DeletePodDisruptionBudget
func (mr *MockPodDisruptionBudgetClientMockRecorder) DeletePodDisruptionBudget(namespace, name, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePodDisruptionBudget", reflect.TypeOf((*MockPodDisruptionBudgetClient)(nil).DeletePodDisruptionBudget), namespace, name, options)
}
