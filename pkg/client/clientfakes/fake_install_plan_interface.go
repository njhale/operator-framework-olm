// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/coreos-inc/alm/pkg/apis/installplan/v1alpha1"
	"github.com/coreos-inc/alm/pkg/client"
)

type FakeInstallPlanInterface struct {
	UpdateInstallPlanStub        func(*v1alpha1.InstallPlan) (*v1alpha1.InstallPlan, error)
	updateInstallPlanMutex       sync.RWMutex
	updateInstallPlanArgsForCall []struct {
		arg1 *v1alpha1.InstallPlan
	}
	updateInstallPlanReturns struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}
	updateInstallPlanReturnsOnCall map[int]struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}
	CreateInstallPlanStub        func(*v1alpha1.InstallPlan) (*v1alpha1.InstallPlan, error)
	createInstallPlanMutex       sync.RWMutex
	createInstallPlanArgsForCall []struct {
		arg1 *v1alpha1.InstallPlan
	}
	createInstallPlanReturns struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}
	createInstallPlanReturnsOnCall map[int]struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}
	GetInstallPlanByNameStub        func(namespace string, name string) (*v1alpha1.InstallPlan, error)
	getInstallPlanByNameMutex       sync.RWMutex
	getInstallPlanByNameArgsForCall []struct {
		namespace string
		name      string
	}
	getInstallPlanByNameReturns struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}
	getInstallPlanByNameReturnsOnCall map[int]struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstallPlanInterface) UpdateInstallPlan(arg1 *v1alpha1.InstallPlan) (*v1alpha1.InstallPlan, error) {
	fake.updateInstallPlanMutex.Lock()
	ret, specificReturn := fake.updateInstallPlanReturnsOnCall[len(fake.updateInstallPlanArgsForCall)]
	fake.updateInstallPlanArgsForCall = append(fake.updateInstallPlanArgsForCall, struct {
		arg1 *v1alpha1.InstallPlan
	}{arg1})
	fake.recordInvocation("UpdateInstallPlan", []interface{}{arg1})
	fake.updateInstallPlanMutex.Unlock()
	if fake.UpdateInstallPlanStub != nil {
		return fake.UpdateInstallPlanStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateInstallPlanReturns.result1, fake.updateInstallPlanReturns.result2
}

func (fake *FakeInstallPlanInterface) UpdateInstallPlanCallCount() int {
	fake.updateInstallPlanMutex.RLock()
	defer fake.updateInstallPlanMutex.RUnlock()
	return len(fake.updateInstallPlanArgsForCall)
}

func (fake *FakeInstallPlanInterface) UpdateInstallPlanArgsForCall(i int) *v1alpha1.InstallPlan {
	fake.updateInstallPlanMutex.RLock()
	defer fake.updateInstallPlanMutex.RUnlock()
	return fake.updateInstallPlanArgsForCall[i].arg1
}

func (fake *FakeInstallPlanInterface) UpdateInstallPlanReturns(result1 *v1alpha1.InstallPlan, result2 error) {
	fake.UpdateInstallPlanStub = nil
	fake.updateInstallPlanReturns = struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPlanInterface) UpdateInstallPlanReturnsOnCall(i int, result1 *v1alpha1.InstallPlan, result2 error) {
	fake.UpdateInstallPlanStub = nil
	if fake.updateInstallPlanReturnsOnCall == nil {
		fake.updateInstallPlanReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.InstallPlan
			result2 error
		})
	}
	fake.updateInstallPlanReturnsOnCall[i] = struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPlanInterface) CreateInstallPlan(arg1 *v1alpha1.InstallPlan) (*v1alpha1.InstallPlan, error) {
	fake.createInstallPlanMutex.Lock()
	ret, specificReturn := fake.createInstallPlanReturnsOnCall[len(fake.createInstallPlanArgsForCall)]
	fake.createInstallPlanArgsForCall = append(fake.createInstallPlanArgsForCall, struct {
		arg1 *v1alpha1.InstallPlan
	}{arg1})
	fake.recordInvocation("CreateInstallPlan", []interface{}{arg1})
	fake.createInstallPlanMutex.Unlock()
	if fake.CreateInstallPlanStub != nil {
		return fake.CreateInstallPlanStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createInstallPlanReturns.result1, fake.createInstallPlanReturns.result2
}

func (fake *FakeInstallPlanInterface) CreateInstallPlanCallCount() int {
	fake.createInstallPlanMutex.RLock()
	defer fake.createInstallPlanMutex.RUnlock()
	return len(fake.createInstallPlanArgsForCall)
}

func (fake *FakeInstallPlanInterface) CreateInstallPlanArgsForCall(i int) *v1alpha1.InstallPlan {
	fake.createInstallPlanMutex.RLock()
	defer fake.createInstallPlanMutex.RUnlock()
	return fake.createInstallPlanArgsForCall[i].arg1
}

func (fake *FakeInstallPlanInterface) CreateInstallPlanReturns(result1 *v1alpha1.InstallPlan, result2 error) {
	fake.CreateInstallPlanStub = nil
	fake.createInstallPlanReturns = struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPlanInterface) CreateInstallPlanReturnsOnCall(i int, result1 *v1alpha1.InstallPlan, result2 error) {
	fake.CreateInstallPlanStub = nil
	if fake.createInstallPlanReturnsOnCall == nil {
		fake.createInstallPlanReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.InstallPlan
			result2 error
		})
	}
	fake.createInstallPlanReturnsOnCall[i] = struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPlanInterface) GetInstallPlanByName(namespace string, name string) (*v1alpha1.InstallPlan, error) {
	fake.getInstallPlanByNameMutex.Lock()
	ret, specificReturn := fake.getInstallPlanByNameReturnsOnCall[len(fake.getInstallPlanByNameArgsForCall)]
	fake.getInstallPlanByNameArgsForCall = append(fake.getInstallPlanByNameArgsForCall, struct {
		namespace string
		name      string
	}{namespace, name})
	fake.recordInvocation("GetInstallPlanByName", []interface{}{namespace, name})
	fake.getInstallPlanByNameMutex.Unlock()
	if fake.GetInstallPlanByNameStub != nil {
		return fake.GetInstallPlanByNameStub(namespace, name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInstallPlanByNameReturns.result1, fake.getInstallPlanByNameReturns.result2
}

func (fake *FakeInstallPlanInterface) GetInstallPlanByNameCallCount() int {
	fake.getInstallPlanByNameMutex.RLock()
	defer fake.getInstallPlanByNameMutex.RUnlock()
	return len(fake.getInstallPlanByNameArgsForCall)
}

func (fake *FakeInstallPlanInterface) GetInstallPlanByNameArgsForCall(i int) (string, string) {
	fake.getInstallPlanByNameMutex.RLock()
	defer fake.getInstallPlanByNameMutex.RUnlock()
	return fake.getInstallPlanByNameArgsForCall[i].namespace, fake.getInstallPlanByNameArgsForCall[i].name
}

func (fake *FakeInstallPlanInterface) GetInstallPlanByNameReturns(result1 *v1alpha1.InstallPlan, result2 error) {
	fake.GetInstallPlanByNameStub = nil
	fake.getInstallPlanByNameReturns = struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPlanInterface) GetInstallPlanByNameReturnsOnCall(i int, result1 *v1alpha1.InstallPlan, result2 error) {
	fake.GetInstallPlanByNameStub = nil
	if fake.getInstallPlanByNameReturnsOnCall == nil {
		fake.getInstallPlanByNameReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.InstallPlan
			result2 error
		})
	}
	fake.getInstallPlanByNameReturnsOnCall[i] = struct {
		result1 *v1alpha1.InstallPlan
		result2 error
	}{result1, result2}
}

func (fake *FakeInstallPlanInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateInstallPlanMutex.RLock()
	defer fake.updateInstallPlanMutex.RUnlock()
	fake.createInstallPlanMutex.RLock()
	defer fake.createInstallPlanMutex.RUnlock()
	fake.getInstallPlanByNameMutex.RLock()
	defer fake.getInstallPlanByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstallPlanInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.InstallPlanInterface = new(FakeInstallPlanInterface)
