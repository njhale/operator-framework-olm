// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/coreos-inc/alm/pkg/apis/subscription/v1alpha1"
	"github.com/coreos-inc/alm/pkg/client"
)

type FakeSubscriptionClientInterface struct {
	CreateSubscriptionStub        func(*v1alpha1.Subscription) (*v1alpha1.Subscription, error)
	createSubscriptionMutex       sync.RWMutex
	createSubscriptionArgsForCall []struct {
		arg1 *v1alpha1.Subscription
	}
	createSubscriptionReturns struct {
		result1 *v1alpha1.Subscription
		result2 error
	}
	createSubscriptionReturnsOnCall map[int]struct {
		result1 *v1alpha1.Subscription
		result2 error
	}
	UpdateSubscriptionStub        func(*v1alpha1.Subscription) (*v1alpha1.Subscription, error)
	updateSubscriptionMutex       sync.RWMutex
	updateSubscriptionArgsForCall []struct {
		arg1 *v1alpha1.Subscription
	}
	updateSubscriptionReturns struct {
		result1 *v1alpha1.Subscription
		result2 error
	}
	updateSubscriptionReturnsOnCall map[int]struct {
		result1 *v1alpha1.Subscription
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSubscriptionClientInterface) CreateSubscription(arg1 *v1alpha1.Subscription) (*v1alpha1.Subscription, error) {
	fake.createSubscriptionMutex.Lock()
	ret, specificReturn := fake.createSubscriptionReturnsOnCall[len(fake.createSubscriptionArgsForCall)]
	fake.createSubscriptionArgsForCall = append(fake.createSubscriptionArgsForCall, struct {
		arg1 *v1alpha1.Subscription
	}{arg1})
	fake.recordInvocation("CreateSubscription", []interface{}{arg1})
	fake.createSubscriptionMutex.Unlock()
	if fake.CreateSubscriptionStub != nil {
		return fake.CreateSubscriptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createSubscriptionReturns.result1, fake.createSubscriptionReturns.result2
}

func (fake *FakeSubscriptionClientInterface) CreateSubscriptionCallCount() int {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	return len(fake.createSubscriptionArgsForCall)
}

func (fake *FakeSubscriptionClientInterface) CreateSubscriptionArgsForCall(i int) *v1alpha1.Subscription {
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	return fake.createSubscriptionArgsForCall[i].arg1
}

func (fake *FakeSubscriptionClientInterface) CreateSubscriptionReturns(result1 *v1alpha1.Subscription, result2 error) {
	fake.CreateSubscriptionStub = nil
	fake.createSubscriptionReturns = struct {
		result1 *v1alpha1.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeSubscriptionClientInterface) CreateSubscriptionReturnsOnCall(i int, result1 *v1alpha1.Subscription, result2 error) {
	fake.CreateSubscriptionStub = nil
	if fake.createSubscriptionReturnsOnCall == nil {
		fake.createSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Subscription
			result2 error
		})
	}
	fake.createSubscriptionReturnsOnCall[i] = struct {
		result1 *v1alpha1.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeSubscriptionClientInterface) UpdateSubscription(arg1 *v1alpha1.Subscription) (*v1alpha1.Subscription, error) {
	fake.updateSubscriptionMutex.Lock()
	ret, specificReturn := fake.updateSubscriptionReturnsOnCall[len(fake.updateSubscriptionArgsForCall)]
	fake.updateSubscriptionArgsForCall = append(fake.updateSubscriptionArgsForCall, struct {
		arg1 *v1alpha1.Subscription
	}{arg1})
	fake.recordInvocation("UpdateSubscription", []interface{}{arg1})
	fake.updateSubscriptionMutex.Unlock()
	if fake.UpdateSubscriptionStub != nil {
		return fake.UpdateSubscriptionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateSubscriptionReturns.result1, fake.updateSubscriptionReturns.result2
}

func (fake *FakeSubscriptionClientInterface) UpdateSubscriptionCallCount() int {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	return len(fake.updateSubscriptionArgsForCall)
}

func (fake *FakeSubscriptionClientInterface) UpdateSubscriptionArgsForCall(i int) *v1alpha1.Subscription {
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	return fake.updateSubscriptionArgsForCall[i].arg1
}

func (fake *FakeSubscriptionClientInterface) UpdateSubscriptionReturns(result1 *v1alpha1.Subscription, result2 error) {
	fake.UpdateSubscriptionStub = nil
	fake.updateSubscriptionReturns = struct {
		result1 *v1alpha1.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeSubscriptionClientInterface) UpdateSubscriptionReturnsOnCall(i int, result1 *v1alpha1.Subscription, result2 error) {
	fake.UpdateSubscriptionStub = nil
	if fake.updateSubscriptionReturnsOnCall == nil {
		fake.updateSubscriptionReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Subscription
			result2 error
		})
	}
	fake.updateSubscriptionReturnsOnCall[i] = struct {
		result1 *v1alpha1.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeSubscriptionClientInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSubscriptionMutex.RLock()
	defer fake.createSubscriptionMutex.RUnlock()
	fake.updateSubscriptionMutex.RLock()
	defer fake.updateSubscriptionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSubscriptionClientInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.SubscriptionClientInterface = new(FakeSubscriptionClientInterface)
