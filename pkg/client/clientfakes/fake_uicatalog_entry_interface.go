// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/coreos-inc/alm/pkg/apis/uicatalogentry/v1alpha1"
	"github.com/coreos-inc/alm/pkg/client"
)

type FakeUICatalogEntryInterface struct {
	UpdateEntryStub        func(csv *v1alpha1.UICatalogEntry) (*v1alpha1.UICatalogEntry, error)
	updateEntryMutex       sync.RWMutex
	updateEntryArgsForCall []struct {
		csv *v1alpha1.UICatalogEntry
	}
	updateEntryReturns struct {
		result1 *v1alpha1.UICatalogEntry
		result2 error
	}
	updateEntryReturnsOnCall map[int]struct {
		result1 *v1alpha1.UICatalogEntry
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUICatalogEntryInterface) UpdateEntry(csv *v1alpha1.UICatalogEntry) (*v1alpha1.UICatalogEntry, error) {
	fake.updateEntryMutex.Lock()
	ret, specificReturn := fake.updateEntryReturnsOnCall[len(fake.updateEntryArgsForCall)]
	fake.updateEntryArgsForCall = append(fake.updateEntryArgsForCall, struct {
		csv *v1alpha1.UICatalogEntry
	}{csv})
	fake.recordInvocation("UpdateEntry", []interface{}{csv})
	fake.updateEntryMutex.Unlock()
	if fake.UpdateEntryStub != nil {
		return fake.UpdateEntryStub(csv)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateEntryReturns.result1, fake.updateEntryReturns.result2
}

func (fake *FakeUICatalogEntryInterface) UpdateEntryCallCount() int {
	fake.updateEntryMutex.RLock()
	defer fake.updateEntryMutex.RUnlock()
	return len(fake.updateEntryArgsForCall)
}

func (fake *FakeUICatalogEntryInterface) UpdateEntryArgsForCall(i int) *v1alpha1.UICatalogEntry {
	fake.updateEntryMutex.RLock()
	defer fake.updateEntryMutex.RUnlock()
	return fake.updateEntryArgsForCall[i].csv
}

func (fake *FakeUICatalogEntryInterface) UpdateEntryReturns(result1 *v1alpha1.UICatalogEntry, result2 error) {
	fake.UpdateEntryStub = nil
	fake.updateEntryReturns = struct {
		result1 *v1alpha1.UICatalogEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeUICatalogEntryInterface) UpdateEntryReturnsOnCall(i int, result1 *v1alpha1.UICatalogEntry, result2 error) {
	fake.UpdateEntryStub = nil
	if fake.updateEntryReturnsOnCall == nil {
		fake.updateEntryReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.UICatalogEntry
			result2 error
		})
	}
	fake.updateEntryReturnsOnCall[i] = struct {
		result1 *v1alpha1.UICatalogEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeUICatalogEntryInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateEntryMutex.RLock()
	defer fake.updateEntryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUICatalogEntryInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.UICatalogEntryInterface = new(FakeUICatalogEntryInterface)
