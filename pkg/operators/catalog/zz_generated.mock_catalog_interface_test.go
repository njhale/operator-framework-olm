// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/coreos-inc/alm/pkg/catalog (interfaces: Source)

package catalog

import (
	v1alpha1 "github.com/coreos-inc/alm/pkg/apis/clusterserviceversion/v1alpha1"
	catalog "github.com/coreos-inc/alm/pkg/catalog"
	gomock "github.com/golang/mock/gomock"
	v1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
)

// Mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *_MockSourceRecorder
}

// Recorder for MockSource (not exported)
type _MockSourceRecorder struct {
	mock *MockSource
}

func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &_MockSourceRecorder{mock}
	return mock
}

func (_m *MockSource) EXPECT() *_MockSourceRecorder {
	return _m.recorder
}

func (_m *MockSource) FindCRDByKey(_param0 catalog.CRDKey) (*v1beta1.CustomResourceDefinition, error) {
	ret := _m.ctrl.Call(_m, "FindCRDByKey", _param0)
	ret0, _ := ret[0].(*v1beta1.CustomResourceDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) FindCRDByKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindCRDByKey", arg0)
}

func (_m *MockSource) FindCSVByName(_param0 string) (*v1alpha1.ClusterServiceVersion, error) {
	ret := _m.ctrl.Call(_m, "FindCSVByName", _param0)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) FindCSVByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindCSVByName", arg0)
}

func (_m *MockSource) FindCSVForPackageNameUnderChannel(_param0 string, _param1 string) (*v1alpha1.ClusterServiceVersion, error) {
	ret := _m.ctrl.Call(_m, "FindCSVForPackageNameUnderChannel", _param0, _param1)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) FindCSVForPackageNameUnderChannel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindCSVForPackageNameUnderChannel", arg0, arg1)
}

func (_m *MockSource) FindReplacementCSVForName(_param0 string) (*v1alpha1.ClusterServiceVersion, error) {
	ret := _m.ctrl.Call(_m, "FindReplacementCSVForName", _param0)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) FindReplacementCSVForName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindReplacementCSVForName", arg0)
}

func (_m *MockSource) FindReplacementCSVForPackageNameUnderChannel(_param0 string, _param1 string, _param2 string) (*v1alpha1.ClusterServiceVersion, error) {
	ret := _m.ctrl.Call(_m, "FindReplacementCSVForPackageNameUnderChannel", _param0, _param1, _param2)
	ret0, _ := ret[0].(*v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) FindReplacementCSVForPackageNameUnderChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindReplacementCSVForPackageNameUnderChannel", arg0, arg1, arg2)
}

func (_m *MockSource) ListLatestCSVsForCRD(_param0 catalog.CRDKey) ([]catalog.CSVAndChannelInfo, error) {
	ret := _m.ctrl.Call(_m, "ListLatestCSVsForCRD", _param0)
	ret0, _ := ret[0].([]catalog.CSVAndChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) ListLatestCSVsForCRD(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListLatestCSVsForCRD", arg0)
}

func (_m *MockSource) ListServices() ([]v1alpha1.ClusterServiceVersion, error) {
	ret := _m.ctrl.Call(_m, "ListServices")
	ret0, _ := ret[0].([]v1alpha1.ClusterServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSourceRecorder) ListServices() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListServices")
}
