// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/deployment_install_client.go

// Package install is a generated GoMock package.
package install

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	v1beta10 "k8s.io/api/rbac/v1beta1"
	reflect "reflect"
)

// MockInstallStrategyDeploymentInterface is a mock of InstallStrategyDeploymentInterface interface
type MockInstallStrategyDeploymentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInstallStrategyDeploymentInterfaceMockRecorder
}

// MockInstallStrategyDeploymentInterfaceMockRecorder is the mock recorder for MockInstallStrategyDeploymentInterface
type MockInstallStrategyDeploymentInterfaceMockRecorder struct {
	mock *MockInstallStrategyDeploymentInterface
}

// NewMockInstallStrategyDeploymentInterface creates a new mock instance
func NewMockInstallStrategyDeploymentInterface(ctrl *gomock.Controller) *MockInstallStrategyDeploymentInterface {
	mock := &MockInstallStrategyDeploymentInterface{ctrl: ctrl}
	mock.recorder = &MockInstallStrategyDeploymentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallStrategyDeploymentInterface) EXPECT() *MockInstallStrategyDeploymentInterfaceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method
func (m *MockInstallStrategyDeploymentInterface) CreateRole(role *v1beta10.Role) (*v1beta10.Role, error) {
	ret := m.ctrl.Call(m, "CreateRole", role)
	ret0, _ := ret[0].(*v1beta10.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) CreateRole(role interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).CreateRole), role)
}

// CreateRoleBinding mocks base method
func (m *MockInstallStrategyDeploymentInterface) CreateRoleBinding(roleBinding *v1beta10.RoleBinding) (*v1beta10.RoleBinding, error) {
	ret := m.ctrl.Call(m, "CreateRoleBinding", roleBinding)
	ret0, _ := ret[0].(*v1beta10.RoleBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleBinding indicates an expected call of CreateRoleBinding
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) CreateRoleBinding(roleBinding interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleBinding", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).CreateRoleBinding), roleBinding)
}

// EnsureServiceAccount mocks base method
func (m *MockInstallStrategyDeploymentInterface) EnsureServiceAccount(serviceAccount *v1.ServiceAccount) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "EnsureServiceAccount", serviceAccount)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureServiceAccount indicates an expected call of EnsureServiceAccount
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) EnsureServiceAccount(serviceAccount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureServiceAccount", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).EnsureServiceAccount), serviceAccount)
}

// CreateDeployment mocks base method
func (m *MockInstallStrategyDeploymentInterface) CreateDeployment(deployment *v1beta1.Deployment) (*v1beta1.Deployment, error) {
	ret := m.ctrl.Call(m, "CreateDeployment", deployment)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) CreateDeployment(deployment interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).CreateDeployment), deployment)
}

// CreateOrUpdateDeployment mocks base method
func (m *MockInstallStrategyDeploymentInterface) CreateOrUpdateDeployment(deployment *v1beta1.Deployment) (*v1beta1.Deployment, error) {
	ret := m.ctrl.Call(m, "CreateOrUpdateDeployment", deployment)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateDeployment indicates an expected call of CreateOrUpdateDeployment
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) CreateOrUpdateDeployment(deployment interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDeployment", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).CreateOrUpdateDeployment), deployment)
}

// DeleteDeployment mocks base method
func (m *MockInstallStrategyDeploymentInterface) DeleteDeployment(name string) error {
	ret := m.ctrl.Call(m, "DeleteDeployment", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) DeleteDeployment(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).DeleteDeployment), name)
}

// GetServiceAccountByName mocks base method
func (m *MockInstallStrategyDeploymentInterface) GetServiceAccountByName(serviceAccountName string) (*v1.ServiceAccount, error) {
	ret := m.ctrl.Call(m, "GetServiceAccountByName", serviceAccountName)
	ret0, _ := ret[0].(*v1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccountByName indicates an expected call of GetServiceAccountByName
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) GetServiceAccountByName(serviceAccountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccountByName", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).GetServiceAccountByName), serviceAccountName)
}

// FindAnyDeploymentsMatchingNames mocks base method
func (m *MockInstallStrategyDeploymentInterface) FindAnyDeploymentsMatchingNames(depNames []string) []*v1beta1.Deployment {
	ret := m.ctrl.Call(m, "FindAnyDeploymentsMatchingNames", depNames)
	ret0, _ := ret[0].([]*v1beta1.Deployment)
	return ret0
}

// FindAnyDeploymentsMatchingNames indicates an expected call of FindAnyDeploymentsMatchingNames
func (mr *MockInstallStrategyDeploymentInterfaceMockRecorder) FindAnyDeploymentsMatchingNames(depNames interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnyDeploymentsMatchingNames", reflect.TypeOf((*MockInstallStrategyDeploymentInterface)(nil).FindAnyDeploymentsMatchingNames), depNames)
}
